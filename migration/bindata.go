// Code generated by go-bindata. DO NOT EDIT.
// sources:
// migration/0001_initial.sql (6.387kB)
// migration/0002_player_name.sql (133B)
// migration/0003_progress_extension.sql (989B)
// migration/0004_suggestions.sql (813B)
// migration/0005_progression_fix.sql (2.715kB)
// migration/0006_stats.sql (456B)

package migration

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migration0001_initialSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\xc1\x6e\xe3\x36\x10\xbd\xfb\x2b\x78\xb3\x8d\x66\x81\x36\xd8\x00\x05\x8a\x1c\x64\x9b\x49\x8d\xda\x72\x2a\xcb\xc5\xee\x89\x62\xa4\x89\xcc\x46\x22\x55\x92\xf2\xc6\x7f\x5f\x50\x92\x6d\x51\x76\xbc\x92\xb6\x8b\x45\x75\x89\xc5\xf0\x71\x46\x6f\x86\x1c\xbe\xf9\xf0\x01\xfd\x94\xb2\x58\x52\x0d\x68\x93\x0d\x06\xf5\xf7\xb5\xa6\x1a\x52\xe0\x7a\x02\x31\xe3\x83\xa9\x87\x1d\x1f\x23\xdf\x99\x2c\x30\x9a\x3f\x20\x77\xe5\x23\xfc\x69\xbe\xf6\xd7\x28\x4b\xe8\x1e\xe4\x60\x34\x40\x08\x21\x16\xa1\xda\x33\x77\x7d\xe4\x6c\xfc\x15\x99\xbb\x53\x0f\x2f\xb1\xeb\xa3\x27\x6f\xbe\x74\xbc\xcf\xe8\x0f\xfc\xf9\xa6\x40\x28\x0d\x34\x25\x07\xdc\x64\xfe\x68\x40\x1b\x77\xfe\xe7\x06\x17\x56\xdc\xcd\x62\x51\xce\x64\x8a\x3c\x53\xce\xa1\x9c\x3a\x59\xad\x16\xd8\x71\x2b\x4b\xf6\x4c\x29\x12\x50\x75\x2f\xca\x61\x1a\x6e\x19\xec\x8a\xaf\x52\x08\x4d\x16\xab\x49\xe5\x02\x24\x10\x6a\x26\x78\x81\x39\x8d\x6b\x21\x12\x92\x49\x11\x4b\x50\xaa\x36\x1e\x4a\xa0\x1a\x22\x42\xb5\x79\xf3\xe7\x4b\xbc\xf6\x9d\xe5\x93\xe5\x08\x9a\xe1\x07\x67\xb3\xf0\xd1\x74\xe3\x79\xd8\xf5\xc9\x71\x5a\xb9\x46\x9e\x45\xdf\xb0\x06\x5a\xb9\x68\xf3\x34\x33\x21\x39\xfb\xdf\x60\x8c\xa6\xbf\x3b\x9e\x33\xf5\xb1\x87\xd6\xd8\x47\xb9\x7e\xf9\x35\x7d\xfe\x38\x40\x68\xba\x5a\x2c\x0c\xa6\x1a\x21\x39\x67\xa1\x88\x80\x84\xec\xb7\xcb\xc1\xc7\x3c\xea\x9b\x16\xe1\x96\x6a\x92\x88\x58\x9d\x65\x46\x9b\xac\x48\x41\x29\x1a\x83\xa1\x06\x7f\xf2\xaf\x38\xde\x88\x7c\x99\x8c\x26\x9d\x8c\x95\x6b\x8f\x8d\xd3\x2c\x05\xa5\x69\x9a\x21\x43\xaa\xe1\xb2\x1d\xee\x61\xe5\xe1\xf9\xa3\x6b\x1c\x47\xa3\xa3\xf1\x31\xf2\xf0\x03\xf6\xb0\x3b\xc5\x87\xfd\x81\x46\x66\x78\xe5\xa2\x19\x5e\x60\x13\x36\x67\x3d\x75\x66\xb8\x1e\xc8\x72\xe4\x87\x85\x2f\xa8\xdc\x3f\x24\x7c\x50\x05\x2e\x60\x51\x70\x81\x07\xc6\x75\x83\x91\x46\x50\x4b\x82\x82\x23\x29\xc1\x65\xf4\xf1\x39\x24\xfb\x89\xdc\xe0\x95\x25\x09\x09\x45\xce\x75\xd0\xc0\xe6\x5c\xb1\xf8\x70\x14\x9c\xb0\xc3\x9f\x87\x15\x34\x02\xaa\xb7\x67\xd8\x56\xd0\x04\x68\x04\x92\x18\xe3\x2a\xe8\x06\xa5\x4a\xd1\x3c\xd1\x0d\x6c\x2b\x68\x0a\x11\x0b\x9b\x46\xdb\x41\x81\xc7\x8c\x43\xd3\xe5\x56\x50\x95\x67\x99\x90\xbd\x1c\x96\x10\x0a\xde\xcf\xe1\x2f\x8c\x9f\x87\xb5\x65\x70\x84\x82\x9e\x29\xf1\x22\x19\xf0\x28\xd9\x13\xb5\x15\xba\x1b\x4d\x47\x68\x77\x86\x25\xec\xd8\x0e\x9a\x5b\xa8\x0b\x94\x14\x15\x32\xa5\x1a\x0a\xcb\x6d\x13\x91\x29\xad\xfa\x58\xcd\x24\x28\xcd\x62\x08\xba\x43\xc3\x5c\x4a\xe0\x9a\x48\xca\x5f\x3b\xee\x1c\x78\xcb\x2e\x9c\x32\xed\x72\xd8\x84\x93\xbc\x30\x69\xb1\xdc\x01\xba\x65\x3d\x12\x71\x0b\x34\xb2\x12\xa9\x03\x4d\x22\xcd\x12\x30\xd5\x5f\x3c\xff\x6d\x6e\x1e\x3b\x13\xd9\xb6\x56\x13\x88\xc8\x36\x53\x9d\xd3\x5f\x0a\x1a\x9d\x6d\xd7\xb6\xa7\x04\x0b\x59\x04\xaa\x47\x4a\xec\x60\xcb\xc2\x04\x14\x89\x40\x69\x29\xf6\x65\x8c\xba\x40\xc9\x36\x23\x12\x32\x5a\xc5\xb7\xe5\x29\xc1\x63\x50\xe5\xb1\xd6\x31\x11\x4d\xbd\x22\xe6\x3a\x40\x94\x39\xe0\xa2\xf2\xa3\xbb\x14\x8e\xe3\x0a\x41\x7b\xab\x87\xc2\x61\x63\x3b\x14\x8e\x86\xd1\x8e\x85\xc3\x42\x77\x2a\x1c\x3d\x1c\x2e\x0b\x47\x2f\x87\x2b\x86\x55\x28\x24\xf4\x2c\xcd\x36\xb6\x03\xc3\x0d\xa3\x1d\x19\xb6\xd0\x9d\x18\xee\xe1\x70\xc9\x70\x2f\x87\xb5\xd0\x34\xe9\x07\x3d\xc9\xa2\xfa\x39\x71\xba\x59\xb7\x95\x46\xc1\x49\x1b\xf5\x5d\xe8\x9a\x3e\x2a\x8d\xd4\x14\x07\x1a\x99\x2b\xee\xb8\x1c\xaf\x94\xa7\x19\x6e\x5e\x88\x49\xf5\x9e\x73\xf6\x4f\x80\x46\xb5\x9b\x6d\x85\x9d\xae\xdc\xb5\xef\x39\x46\x79\x9c\x61\xd9\xf3\xcb\x2b\xf9\x25\xb0\x05\x43\x7d\x89\xba\x64\xa8\xc6\x83\xca\xb3\x96\xb2\x01\xbb\x8f\x73\x17\xa3\x7b\x34\xe7\x5c\xcc\x26\x83\x53\x8c\x8c\xa0\x30\x52\xe2\xfe\x82\x98\xb8\xef\x28\x27\x7a\xca\x41\x1a\xa5\x8c\x9f\x69\xc1\x36\x52\x90\xd3\x14\x8a\xc9\x7f\x39\x9e\xf9\x90\xd1\xed\xdd\xdd\xb8\x21\xc3\x8e\x4d\x84\xaa\x7f\x50\x3e\xc7\x3c\x29\x83\x5a\x75\x11\xd2\x34\xe7\x4c\xef\x6d\x81\x68\x2f\xf7\x92\xd0\x58\xbd\x6b\xf2\x3f\x57\x68\x3d\x29\x7d\x4e\x44\xf8\x7a\x2e\xaf\xdb\x33\x6b\xb7\x5e\x90\x4d\x5e\xe3\xb1\x09\x2a\x4c\x13\xbd\xcf\xca\xc8\x20\xec\x6e\x96\x68\x34\x9c\x38\xee\xf0\x06\x0d\x1f\x9d\x47\xf3\x67\xb9\xf1\xf1\xb0\x19\x29\x09\x54\x09\x7e\x5a\xd7\x62\xf8\xaa\x4d\x78\xcb\x98\xdc\x13\x73\x34\x94\x07\xd0\x15\xa1\xde\x6c\x1c\xa9\x1c\x24\x29\x52\xf0\x6b\xad\x81\x46\x5b\x80\xca\x18\x34\x61\x59\xc3\xdb\x8f\x77\xe3\x0b\x7a\xb5\x32\x90\x35\xbf\xed\xf2\x6c\xeb\x24\x68\xb8\x68\x9d\x06\xe5\xd6\x29\x1a\x08\x3f\x2e\xf5\x0e\x47\x95\x04\x53\x94\xae\x37\x07\x2e\x88\xfb\x6f\x78\xae\xb7\x17\x4a\x7f\xec\x06\x83\xb1\x7f\xa1\x9b\x50\x4d\x8d\x48\xad\x25\xf1\x7d\x5c\x3d\x1a\x34\xb9\x6e\xf3\xa3\xe1\x4d\x5f\x8e\xe1\xb5\x26\x57\x4b\x83\xc7\x12\x59\xb3\x69\xf6\x8b\x19\xff\x2e\x5f\xa8\x34\xd5\x79\x43\x16\x00\xcf\x53\x34\x1a\x3e\x01\x8f\x18\x8f\x87\x37\x43\x0f\x76\x0c\xbe\x40\x54\xfc\x54\x22\xd9\x15\x3f\x67\x4c\xa5\x4c\x29\x88\x86\xe3\xf6\xed\xbd\xa0\xdc\x20\x5c\xe8\x9a\x18\xe9\x45\xe9\xf5\x5b\x40\xbd\xfc\x57\x19\x7f\xac\xe0\x23\x2b\xe7\xbe\x06\xb8\xad\x01\xea\x99\xf7\xfe\x95\xa1\x69\xcf\xbe\x31\x58\xb6\xdb\xdd\x19\x0c\x21\xc5\x06\x3a\xbb\x34\xb4\xf3\xe1\xf6\x1d\x1f\xac\xcf\xf9\x9f\x5c\x5f\xfe\x0d\x00\x00\xff\xff\xcd\x98\x33\xfa\xf3\x18\x00\x00")

func migration0001_initialSqlBytes() ([]byte, error) {
	return bindataRead(
		_migration0001_initialSql,
		"migration/0001_initial.sql",
	)
}

func migration0001_initialSql() (*asset, error) {
	bytes, err := migration0001_initialSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migration/0001_initial.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc5, 0x8b, 0xd5, 0xff, 0x4, 0x71, 0x33, 0xae, 0x53, 0x7d, 0x7e, 0xfd, 0x54, 0x53, 0xbc, 0x9f, 0xf6, 0x39, 0x6d, 0x9, 0x14, 0xbd, 0x27, 0xe5, 0xdd, 0x83, 0xdd, 0x3b, 0x8d, 0xe2, 0xa6, 0x1e}}
	return a, nil
}

var _migration0002_player_nameSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcc\x31\x0a\x02\x41\x10\x44\xd1\x7c\x4e\x51\xa1\x22\x9b\x08\x1b\x99\x09\x9e\x40\x8c\xa5\x74\xca\x75\xa0\xa7\x5d\xda\x56\xf0\xf6\x62\x66\xb0\xe1\x0f\xfe\x1b\x06\x6c\x7a\x9b\x82\x29\x9c\xe6\x52\xfe\xfb\x98\x4c\x75\x79\xee\x35\x35\x2f\xb4\x54\x20\x79\x31\x61\x36\x7e\x14\x60\xad\x70\x76\xe1\xcd\xb8\xde\x19\xab\xed\x38\xae\xe1\x8f\x84\xbf\xcc\xc0\xdb\xef\x78\xa6\xd8\xcf\xad\xee\x96\xf1\x83\xd7\x6f\x00\x00\x00\xff\xff\xdb\x50\x21\x61\x85\x00\x00\x00")

func migration0002_player_nameSqlBytes() ([]byte, error) {
	return bindataRead(
		_migration0002_player_nameSql,
		"migration/0002_player_name.sql",
	)
}

func migration0002_player_nameSql() (*asset, error) {
	bytes, err := migration0002_player_nameSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migration/0002_player_name.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xde, 0x6d, 0x49, 0xfa, 0x7a, 0xa2, 0xaa, 0xc6, 0x30, 0xab, 0x3d, 0x2e, 0xcb, 0xb6, 0x39, 0xdc, 0x8, 0x4f, 0xfa, 0x8b, 0xef, 0xd4, 0x7a, 0x96, 0xc7, 0x1a, 0xec, 0x94, 0x60, 0xa9, 0x7e, 0x41}}
	return a, nil
}

var _migration0003_progress_extensionSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x93\xc1\x6e\xe2\x40\x0c\x86\xef\x79\x8a\xff\x16\xd0\x82\xb4\x9c\x57\x7b\x59\x69\x9f\xa0\xea\x39\x32\x19\x27\x58\x24\x9e\xd4\xe3\x14\xf1\xf6\xd5\x40\x14\x28\x42\x1c\x5a\xa1\xce\xcd\x96\xfd\xfb\xb3\x7e\xcf\x7a\x8d\x5f\xbd\xb4\x46\xce\x78\x1d\x8a\xe2\x3a\x7e\x71\x72\xee\x59\xfd\x1f\xb7\xa2\x05\x75\xce\x06\xa7\x6d\xc7\x18\x3a\x3a\xb2\x55\x83\xc5\xd6\x38\xa5\x02\x00\x28\x04\x48\xaa\x62\xd3\x48\x2d\xd4\xc1\x45\x8f\xa2\x0e\x8d\x0e\x1d\xbb\x0e\x75\xec\xb3\x1a\xca\xc3\x8e\x15\x1b\x88\xa3\x67\xd2\x04\xdf\x31\x92\x93\x27\x90\x31\x1a\x8b\xfd\x29\x35\x2b\xb5\xd4\xf3\x0a\xa7\xae\xdf\x10\x2f\xcb\x74\x2e\x8a\xa3\x21\x1e\x14\x89\xed\x9d\x2d\x95\xa0\x26\x23\x4e\x70\x12\xfe\xdc\x5f\xe7\xbf\x86\x6f\x2d\x1a\x2c\x0e\x68\xa2\xb1\xb4\x8a\x3d\x1f\x6f\x8b\x2a\xd9\x36\xfb\x6a\xf3\xcc\xe9\xf7\xa6\x4e\xf1\xa8\xf2\xf6\xa4\xd1\xd9\xe1\x3a\x6a\x72\xa3\x6c\xec\x03\x80\x53\x79\x7e\x39\x18\x19\x8b\xd9\x93\xd5\xf5\x8d\x2c\x7f\x06\xf4\xec\xcf\xcc\x78\x6d\xe5\x05\x74\x09\xe3\x86\x8d\xb5\xe6\x34\x29\x60\x21\x61\x39\xb7\xe5\x17\x15\xe3\x10\x32\x61\x4d\xa9\xa6\xc0\x39\x13\xb8\xe3\x4b\xe6\x8b\x2b\x4e\xb2\x37\xe8\x48\xec\x9f\x3e\xd9\x5f\x3c\xb8\xb3\x8f\x00\x00\x00\xff\xff\x40\xe8\xb1\x22\xdd\x03\x00\x00")

func migration0003_progress_extensionSqlBytes() ([]byte, error) {
	return bindataRead(
		_migration0003_progress_extensionSql,
		"migration/0003_progress_extension.sql",
	)
}

func migration0003_progress_extensionSql() (*asset, error) {
	bytes, err := migration0003_progress_extensionSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migration/0003_progress_extension.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x10, 0xcf, 0x69, 0x9c, 0x4e, 0x3d, 0xd2, 0x73, 0x71, 0x3b, 0x1c, 0xc5, 0x4f, 0xe4, 0xd7, 0xf0, 0xe2, 0xbe, 0x1e, 0x31, 0x95, 0xd5, 0x5e, 0x1b, 0x1c, 0x3a, 0xd7, 0xa5, 0x5a, 0x5a, 0xd4, 0x14}}
	return a, nil
}

var _migration0004_suggestionsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x93\x41\x8f\xd3\x30\x10\x85\xef\xfe\x15\xef\xd8\x0a\xf6\xc6\x01\x09\xf5\xe0\xa6\xd3\xc5\x22\x75\x2a\xc7\x91\xd8\x53\xe2\x8d\x67\x2b\x8b\xc6\xad\x1a\x47\x82\x7f\x8f\x4c\xda\xc2\x61\x39\xb0\x12\x73\x9b\x77\x78\x6f\x66\x3e\xfb\xe1\x01\xef\x86\x70\xb8\xb8\xc4\x68\xce\x42\xfc\xd9\xd7\xc9\x25\x1e\x38\xa6\x35\x1f\x42\x14\x85\x21\x69\x09\x56\xae\x4b\x82\xda\x42\x57\x16\xf4\x55\xd5\xb6\x46\x37\x4e\x87\x03\x8f\x29\x9c\xe2\xd8\x89\x85\x00\x80\x2e\xf8\x0e\xb7\x0a\x31\xe1\xdf\x2b\x27\xe8\xa6\x2c\x21\x1b\x5b\xb5\x4a\x17\x86\x76\xa4\xed\xfb\xd9\xff\x7c\x74\x3f\xf8\xd2\xfe\x8a\x79\x9b\xff\xbd\x36\xb4\x95\x4d\x39\x87\x5d\xdd\x5f\x98\xfd\xb3\xeb\xbf\xe5\x1d\x12\x7f\x4f\x28\x3e\x4b\x23\x0b\x4b\x06\x35\x59\x4c\xe9\xe5\xe3\xf0\xfc\x01\x45\x55\x96\xf9\x2a\xd7\xbe\x9d\x62\xe8\x4f\x9e\xdb\x3e\xdc\xa7\xbf\x1a\xf6\x17\x76\x89\x7d\xeb\x52\x87\x14\x06\x1e\x93\x1b\xce\x6f\x3b\xc7\x6d\xdc\xa2\x31\x86\xb4\x6d\xad\xda\x51\x6d\xe5\x6e\x7f\x8d\x9a\xce\xfe\xbf\x47\xa1\xd2\x68\xf6\x9b\xbc\xfb\x5f\xc6\xd8\x1b\xb5\x93\xe6\x09\x5f\xe8\x09\x8b\xfc\x1a\x96\xb3\xbe\xad\x0c\xa9\x47\x3d\xeb\x77\x88\x4b\x18\xda\x92\x21\x5d\x50\x8d\x59\xc5\x22\xcb\xa7\x88\x79\x1f\xf4\x6e\xec\x9d\xe7\xac\x78\x3e\x72\x62\x8c\x9c\x10\xa7\xe3\x51\x2c\x41\xfa\x51\x69\xc2\x0a\x2a\xc6\xd3\x66\x2d\x7e\x43\xcd\xe0\x32\xb2\xd5\x0d\x92\xc0\x1d\xdb\xea\x15\x70\x9f\x5e\xff\x04\x14\xfd\xcf\x00\x00\x00\xff\xff\x79\xf1\x38\xc0\x2d\x03\x00\x00")

func migration0004_suggestionsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migration0004_suggestionsSql,
		"migration/0004_suggestions.sql",
	)
}

func migration0004_suggestionsSql() (*asset, error) {
	bytes, err := migration0004_suggestionsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migration/0004_suggestions.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x70, 0x98, 0xb0, 0x56, 0x35, 0xb, 0x10, 0x15, 0x29, 0x38, 0xcd, 0xe6, 0xb6, 0xb7, 0xa1, 0x5f, 0x6f, 0xaa, 0xd9, 0xf3, 0xd5, 0x88, 0xfe, 0xb2, 0x4a, 0x32, 0x58, 0xc6, 0x1d, 0x1d, 0x91, 0x83}}
	return a, nil
}

var _migration0005_progression_fixSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x96\x31\x6f\xdb\x30\x10\x85\x77\xff\x0a\x6e\x19\xda\x00\xdd\x3b\x39\x88\x03\x14\x50\x13\xa0\xb5\x87\x4e\x34\x4b\xbe\x48\xd7\x50\x24\x41\x9e\xdc\xfa\xdf\x17\x86\x1c\xa1\x01\x3a\x44\x6f\x14\xc4\xef\x74\x7a\xef\x74\x4f\xb7\xb7\xe6\xc3\x28\x7d\x75\x0a\x73\x28\x9b\xcd\xbf\xd7\xdf\xd5\x29\x46\x24\xbd\x43\x2f\x69\xb3\xed\xf6\xbb\x6f\x66\xbf\xbd\xeb\x76\xe6\x58\xa2\x3b\xa3\xda\x52\x73\x5f\xd1\xda\x71\x63\x8c\x31\x5f\x9f\xee\xbf\x3c\xfc\x58\x6e\x4a\x38\x1a\x49\x6a\x1e\x9f\xf6\xe6\xf1\xd0\x75\x1f\xdf\x1c\x7a\x91\x18\xad\xcf\x53\xd2\xf9\xd4\x94\x9a\xf4\x09\x61\x39\x6e\xee\x77\x0f\xdb\x43\xb7\x37\x37\x9f\x6e\xde\xa2\x01\x4e\x07\x92\x8d\x70\x01\xd5\x5e\x9e\xde\x56\xc3\xae\x35\x37\x45\x25\xe9\x11\x41\x3c\xc9\x22\xf5\x92\x40\x37\xde\xa6\x52\x72\x65\x1b\xaf\xf0\x39\x91\xec\x6f\x49\xac\x53\xb9\x81\x44\x9f\xab\x20\x85\x78\xb6\x6d\xc8\xba\xbe\xe7\x05\x67\xe5\x3a\xc9\x09\x81\xe5\xac\xc2\x8d\x76\x74\x0a\x6a\x40\xa5\x11\x6f\x5c\x2a\x9a\x4a\x8f\xd5\xa0\x9f\x6a\x45\x52\x5b\x5d\x7a\x59\x3f\xd4\x7f\xca\xfa\x49\xbe\x38\x6a\x9f\xa5\x12\x02\xcf\xec\x20\xeb\x07\x6a\x80\x0b\xdc\x2c\xf9\x3c\x96\x08\x45\xb0\xf9\xe7\x2f\x78\x95\x13\x61\xeb\x00\x17\x11\xec\x50\x88\x61\xcc\x2e\xd0\x4b\x43\xbc\x04\xa2\xdd\x13\x06\xf1\x11\xcd\x06\x34\xad\xf9\x4c\x58\x75\x2d\x61\x87\x62\x2b\x8a\xa3\xec\x8e\x39\xf5\x68\xf3\xd2\x5b\xff\x45\x44\x77\xb6\x2a\x23\x6c\xbb\x6c\xbf\xb0\x5e\x85\x6b\xd2\x2c\x85\xe8\xb4\xe1\x2b\xcc\x89\xc3\xf3\x4b\xea\xf0\x25\x5e\x93\x87\xaf\x30\xa7\x0f\xcf\x5f\x7d\x68\x3e\x57\xde\x03\x8e\x9e\xf5\xe7\xd8\x45\x7b\x0e\x7f\xd5\x9d\xa3\x67\xcd\x39\x56\xb3\xba\xf8\x6e\xf6\xf3\xff\x7f\x39\x77\x29\xfc\x0d\x00\x00\xff\xff\xad\x5f\x65\x71\x9b\x0a\x00\x00")

func migration0005_progression_fixSqlBytes() ([]byte, error) {
	return bindataRead(
		_migration0005_progression_fixSql,
		"migration/0005_progression_fix.sql",
	)
}

func migration0005_progression_fixSql() (*asset, error) {
	bytes, err := migration0005_progression_fixSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migration/0005_progression_fix.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe, 0xe1, 0xee, 0xf2, 0x25, 0x9, 0x44, 0x1f, 0xd6, 0xc8, 0x33, 0x27, 0x4a, 0x17, 0xaf, 0x24, 0xeb, 0xed, 0x51, 0xf0, 0x18, 0x36, 0xc5, 0xf8, 0xd0, 0xe0, 0x8d, 0xc, 0x65, 0x9c, 0xa5, 0x5d}}
	return a, nil
}

var _migration0006_statsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\x31\x6b\xfb\x30\x10\xc5\x77\x7d\x8a\x37\x26\xfc\xff\xd9\x3a\x14\x4a\x06\xc5\xb9\xb4\xa2\xb6\x1c\x64\x19\x9a\x49\x56\x6d\x35\x08\x6a\xc5\x24\xe7\xa1\xdf\xbe\x98\x86\xba\x43\xba\xf4\xa6\xbb\xe3\xde\xef\xc1\xbb\xd5\x0a\xff\xfa\x78\x3c\x7b\x0e\xa8\x07\x21\x7e\xce\x15\x7b\x0e\x7d\x48\xbc\x09\xc7\x98\x44\x66\x48\x5a\x82\x95\x9b\x9c\xa0\x76\xd0\xa5\x05\xbd\xa8\xca\x56\x68\x2e\xec\xf9\xd2\x88\x85\x00\x80\x26\x76\x0d\xe6\x8a\x89\xaf\xdd\xa4\xd0\x75\x9e\x43\xd6\xb6\x74\x4a\x67\x86\x0a\xd2\xf6\xff\x97\x6a\x78\xf7\x1f\xe1\xec\xda\xd3\x98\xb8\xb9\xa1\xba\x9e\xb5\xe7\xe0\x39\x74\xce\xf3\x64\xc2\xb1\x0f\x17\xf6\xfd\x30\xc3\xb7\xb4\x93\x75\x6e\x91\xd5\xc6\x90\xb6\xce\xaa\x82\x2a\x2b\x8b\xfd\x15\x30\x0e\xdd\x1f\x01\x28\x35\xea\xfd\x76\x4a\xe1\x17\xf8\xde\xa8\x42\x9a\x03\x9e\xe9\x80\xc5\x94\xc3\x52\x2c\x41\xfa\x51\x69\xc2\x1a\x2a\xa5\xd3\x76\x23\x30\x3b\x3c\x49\x53\x91\xc5\x1a\x23\xbf\xdd\xf7\xaf\x77\x02\xc8\xca\x3c\x9f\x1c\xbe\x77\x6e\x4c\xb1\x3d\x75\xc1\xb5\xf1\xe1\xf6\x7f\x28\x75\x9f\x01\x00\x00\xff\xff\x52\xc3\xd8\xc2\xc8\x01\x00\x00")

func migration0006_statsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migration0006_statsSql,
		"migration/0006_stats.sql",
	)
}

func migration0006_statsSql() (*asset, error) {
	bytes, err := migration0006_statsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migration/0006_stats.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf, 0xdb, 0xbb, 0xee, 0xc, 0xf8, 0x7, 0xad, 0xfe, 0x29, 0x46, 0xfb, 0x7e, 0x8e, 0x70, 0x8c, 0x2, 0xe3, 0x7e, 0xde, 0x6d, 0xdb, 0x4c, 0xc8, 0x62, 0xf0, 0x74, 0xc4, 0xfe, 0xa8, 0x38, 0x4f}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migration/0001_initial.sql":            migration0001_initialSql,
	"migration/0002_player_name.sql":        migration0002_player_nameSql,
	"migration/0003_progress_extension.sql": migration0003_progress_extensionSql,
	"migration/0004_suggestions.sql":        migration0004_suggestionsSql,
	"migration/0005_progression_fix.sql":    migration0005_progression_fixSql,
	"migration/0006_stats.sql":              migration0006_statsSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"migration": {nil, map[string]*bintree{
		"0001_initial.sql":            {migration0001_initialSql, map[string]*bintree{}},
		"0002_player_name.sql":        {migration0002_player_nameSql, map[string]*bintree{}},
		"0003_progress_extension.sql": {migration0003_progress_extensionSql, map[string]*bintree{}},
		"0004_suggestions.sql":        {migration0004_suggestionsSql, map[string]*bintree{}},
		"0005_progression_fix.sql":    {migration0005_progression_fixSql, map[string]*bintree{}},
		"0006_stats.sql":              {migration0006_statsSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
