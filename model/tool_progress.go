// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ToolProgress is an object representing the database table.
type ToolProgress struct {
	ID          int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	ToolID      int       `boil:"tool_id" json:"tool_id" toml:"tool_id" yaml:"tool_id"`
	UserID      int       `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Kills       int       `boil:"kills" json:"kills" toml:"kills" yaml:"kills"`
	MaxDistance int       `boil:"max_distance" json:"max_distance" toml:"max_distance" yaml:"max_distance"`
	IsOfficial  bool      `boil:"is_official" json:"is_official" toml:"is_official" yaml:"is_official"`
	CreatedAt   time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *toolProgressR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L toolProgressL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ToolProgressColumns = struct {
	ID          string
	ToolID      string
	UserID      string
	Kills       string
	MaxDistance string
	IsOfficial  string
	CreatedAt   string
	UpdatedAt   string
}{
	ID:          "id",
	ToolID:      "tool_id",
	UserID:      "user_id",
	Kills:       "kills",
	MaxDistance: "max_distance",
	IsOfficial:  "is_official",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
}

var ToolProgressTableColumns = struct {
	ID          string
	ToolID      string
	UserID      string
	Kills       string
	MaxDistance string
	IsOfficial  string
	CreatedAt   string
	UpdatedAt   string
}{
	ID:          "tool_progress.id",
	ToolID:      "tool_progress.tool_id",
	UserID:      "tool_progress.user_id",
	Kills:       "tool_progress.kills",
	MaxDistance: "tool_progress.max_distance",
	IsOfficial:  "tool_progress.is_official",
	CreatedAt:   "tool_progress.created_at",
	UpdatedAt:   "tool_progress.updated_at",
}

// Generated where

var ToolProgressWhere = struct {
	ID          whereHelperint
	ToolID      whereHelperint
	UserID      whereHelperint
	Kills       whereHelperint
	MaxDistance whereHelperint
	IsOfficial  whereHelperbool
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpertime_Time
}{
	ID:          whereHelperint{field: "`tool_progress`.`id`"},
	ToolID:      whereHelperint{field: "`tool_progress`.`tool_id`"},
	UserID:      whereHelperint{field: "`tool_progress`.`user_id`"},
	Kills:       whereHelperint{field: "`tool_progress`.`kills`"},
	MaxDistance: whereHelperint{field: "`tool_progress`.`max_distance`"},
	IsOfficial:  whereHelperbool{field: "`tool_progress`.`is_official`"},
	CreatedAt:   whereHelpertime_Time{field: "`tool_progress`.`created_at`"},
	UpdatedAt:   whereHelpertime_Time{field: "`tool_progress`.`updated_at`"},
}

// ToolProgressRels is where relationship names are stored.
var ToolProgressRels = struct {
}{}

// toolProgressR is where relationships are stored.
type toolProgressR struct {
}

// NewStruct creates a new relationship struct
func (*toolProgressR) NewStruct() *toolProgressR {
	return &toolProgressR{}
}

// toolProgressL is where Load methods for each relationship are stored.
type toolProgressL struct{}

var (
	toolProgressAllColumns            = []string{"id", "tool_id", "user_id", "kills", "max_distance", "is_official", "created_at", "updated_at"}
	toolProgressColumnsWithoutDefault = []string{"tool_id", "user_id", "kills", "max_distance", "is_official"}
	toolProgressColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	toolProgressPrimaryKeyColumns     = []string{"id"}
	toolProgressGeneratedColumns      = []string{}
)

type (
	// ToolProgressSlice is an alias for a slice of pointers to ToolProgress.
	// This should almost always be used instead of []ToolProgress.
	ToolProgressSlice []*ToolProgress

	toolProgressQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	toolProgressType                 = reflect.TypeOf(&ToolProgress{})
	toolProgressMapping              = queries.MakeStructMapping(toolProgressType)
	toolProgressPrimaryKeyMapping, _ = queries.BindMapping(toolProgressType, toolProgressMapping, toolProgressPrimaryKeyColumns)
	toolProgressInsertCacheMut       sync.RWMutex
	toolProgressInsertCache          = make(map[string]insertCache)
	toolProgressUpdateCacheMut       sync.RWMutex
	toolProgressUpdateCache          = make(map[string]updateCache)
	toolProgressUpsertCacheMut       sync.RWMutex
	toolProgressUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single toolProgress record from the query.
func (q toolProgressQuery) One(exec boil.Executor) (*ToolProgress, error) {
	o := &ToolProgress{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for tool_progress")
	}

	return o, nil
}

// All returns all ToolProgress records from the query.
func (q toolProgressQuery) All(exec boil.Executor) (ToolProgressSlice, error) {
	var o []*ToolProgress

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to ToolProgress slice")
	}

	return o, nil
}

// Count returns the count of all ToolProgress records in the query.
func (q toolProgressQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count tool_progress rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q toolProgressQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if tool_progress exists")
	}

	return count > 0, nil
}

// ToolProgresses retrieves all the records using an executor.
func ToolProgresses(mods ...qm.QueryMod) toolProgressQuery {
	mods = append(mods, qm.From("`tool_progress`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`tool_progress`.*"})
	}

	return toolProgressQuery{q}
}

// FindToolProgress retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindToolProgress(exec boil.Executor, iD int, selectCols ...string) (*ToolProgress, error) {
	toolProgressObj := &ToolProgress{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `tool_progress` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, toolProgressObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from tool_progress")
	}

	return toolProgressObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ToolProgress) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no tool_progress provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(toolProgressColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	toolProgressInsertCacheMut.RLock()
	cache, cached := toolProgressInsertCache[key]
	toolProgressInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			toolProgressAllColumns,
			toolProgressColumnsWithDefault,
			toolProgressColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(toolProgressType, toolProgressMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(toolProgressType, toolProgressMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `tool_progress` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `tool_progress` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `tool_progress` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, toolProgressPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into tool_progress")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == toolProgressMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}
	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for tool_progress")
	}

CacheNoHooks:
	if !cached {
		toolProgressInsertCacheMut.Lock()
		toolProgressInsertCache[key] = cache
		toolProgressInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the ToolProgress.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ToolProgress) Update(exec boil.Executor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	toolProgressUpdateCacheMut.RLock()
	cache, cached := toolProgressUpdateCache[key]
	toolProgressUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			toolProgressAllColumns,
			toolProgressPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return errors.New("model: unable to update tool_progress, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `tool_progress` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, toolProgressPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(toolProgressType, toolProgressMapping, append(wl, toolProgressPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update tool_progress row")
	}

	if !cached {
		toolProgressUpdateCacheMut.Lock()
		toolProgressUpdateCache[key] = cache
		toolProgressUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q toolProgressQuery) UpdateAll(exec boil.Executor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "model: unable to update all for tool_progress")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ToolProgressSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), toolProgressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `tool_progress` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, toolProgressPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update all in toolProgress slice")
	}

	return nil
}

var mySQLToolProgressUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ToolProgress) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no tool_progress provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(toolProgressColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLToolProgressUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	toolProgressUpsertCacheMut.RLock()
	cache, cached := toolProgressUpsertCache[key]
	toolProgressUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			toolProgressAllColumns,
			toolProgressColumnsWithDefault,
			toolProgressColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			toolProgressAllColumns,
			toolProgressPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("model: unable to upsert tool_progress, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`tool_progress`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `tool_progress` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(toolProgressType, toolProgressMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(toolProgressType, toolProgressMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for tool_progress")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == toolProgressMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(toolProgressType, toolProgressMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model: unable to retrieve unique values for tool_progress")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}
	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for tool_progress")
	}

CacheNoHooks:
	if !cached {
		toolProgressUpsertCacheMut.Lock()
		toolProgressUpsertCache[key] = cache
		toolProgressUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single ToolProgress record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ToolProgress) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("model: no ToolProgress provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), toolProgressPrimaryKeyMapping)
	sql := "DELETE FROM `tool_progress` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete from tool_progress")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q toolProgressQuery) DeleteAll(exec boil.Executor) error {
	if q.Query == nil {
		return errors.New("model: no toolProgressQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from tool_progress")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ToolProgressSlice) DeleteAll(exec boil.Executor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), toolProgressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `tool_progress` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, toolProgressPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from toolProgress slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ToolProgress) Reload(exec boil.Executor) error {
	ret, err := FindToolProgress(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ToolProgressSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ToolProgressSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), toolProgressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `tool_progress`.* FROM `tool_progress` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, toolProgressPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in ToolProgressSlice")
	}

	*o = slice

	return nil
}

// ToolProgressExists checks if the ToolProgress row exists.
func ToolProgressExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `tool_progress` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if tool_progress exists")
	}

	return exists, nil
}

// Exists checks if the ToolProgress row exists.
func (o *ToolProgress) Exists(exec boil.Executor) (bool, error) {
	return ToolProgressExists(exec, o.ID)
}
