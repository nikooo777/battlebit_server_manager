// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ChatLog is an object representing the database table.
type ChatLog struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Message   string    `boil:"message" json:"message" toml:"message" yaml:"message"`
	PlayerID  int       `boil:"player_id" json:"player_id" toml:"player_id" yaml:"player_id"`
	Timestamp time.Time `boil:"timestamp" json:"timestamp" toml:"timestamp" yaml:"timestamp"`

	R *chatLogR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L chatLogL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ChatLogColumns = struct {
	ID        string
	Message   string
	PlayerID  string
	Timestamp string
}{
	ID:        "id",
	Message:   "message",
	PlayerID:  "player_id",
	Timestamp: "timestamp",
}

var ChatLogTableColumns = struct {
	ID        string
	Message   string
	PlayerID  string
	Timestamp string
}{
	ID:        "chat_logs.id",
	Message:   "chat_logs.message",
	PlayerID:  "chat_logs.player_id",
	Timestamp: "chat_logs.timestamp",
}

// Generated where

var ChatLogWhere = struct {
	ID        whereHelperint
	Message   whereHelperstring
	PlayerID  whereHelperint
	Timestamp whereHelpertime_Time
}{
	ID:        whereHelperint{field: "`chat_logs`.`id`"},
	Message:   whereHelperstring{field: "`chat_logs`.`message`"},
	PlayerID:  whereHelperint{field: "`chat_logs`.`player_id`"},
	Timestamp: whereHelpertime_Time{field: "`chat_logs`.`timestamp`"},
}

// ChatLogRels is where relationship names are stored.
var ChatLogRels = struct {
	Player string
}{
	Player: "Player",
}

// chatLogR is where relationships are stored.
type chatLogR struct {
	Player *Player `boil:"Player" json:"Player" toml:"Player" yaml:"Player"`
}

// NewStruct creates a new relationship struct
func (*chatLogR) NewStruct() *chatLogR {
	return &chatLogR{}
}

func (r *chatLogR) GetPlayer() *Player {
	if r == nil {
		return nil
	}
	return r.Player
}

// chatLogL is where Load methods for each relationship are stored.
type chatLogL struct{}

var (
	chatLogAllColumns            = []string{"id", "message", "player_id", "timestamp"}
	chatLogColumnsWithoutDefault = []string{"message", "player_id", "timestamp"}
	chatLogColumnsWithDefault    = []string{"id"}
	chatLogPrimaryKeyColumns     = []string{"id"}
	chatLogGeneratedColumns      = []string{}
)

type (
	// ChatLogSlice is an alias for a slice of pointers to ChatLog.
	// This should almost always be used instead of []ChatLog.
	ChatLogSlice []*ChatLog

	chatLogQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	chatLogType                 = reflect.TypeOf(&ChatLog{})
	chatLogMapping              = queries.MakeStructMapping(chatLogType)
	chatLogPrimaryKeyMapping, _ = queries.BindMapping(chatLogType, chatLogMapping, chatLogPrimaryKeyColumns)
	chatLogInsertCacheMut       sync.RWMutex
	chatLogInsertCache          = make(map[string]insertCache)
	chatLogUpdateCacheMut       sync.RWMutex
	chatLogUpdateCache          = make(map[string]updateCache)
	chatLogUpsertCacheMut       sync.RWMutex
	chatLogUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single chatLog record from the query.
func (q chatLogQuery) One(exec boil.Executor) (*ChatLog, error) {
	o := &ChatLog{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for chat_logs")
	}

	return o, nil
}

// All returns all ChatLog records from the query.
func (q chatLogQuery) All(exec boil.Executor) (ChatLogSlice, error) {
	var o []*ChatLog

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to ChatLog slice")
	}

	return o, nil
}

// Count returns the count of all ChatLog records in the query.
func (q chatLogQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count chat_logs rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q chatLogQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if chat_logs exists")
	}

	return count > 0, nil
}

// Player pointed to by the foreign key.
func (o *ChatLog) Player(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.PlayerID),
	}

	queryMods = append(queryMods, mods...)

	return Players(queryMods...)
}

// LoadPlayer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (chatLogL) LoadPlayer(e boil.Executor, singular bool, maybeChatLog interface{}, mods queries.Applicator) error {
	var slice []*ChatLog
	var object *ChatLog

	if singular {
		var ok bool
		object, ok = maybeChatLog.(*ChatLog)
		if !ok {
			object = new(ChatLog)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeChatLog)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeChatLog))
			}
		}
	} else {
		s, ok := maybeChatLog.(*[]*ChatLog)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeChatLog)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeChatLog))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &chatLogR{}
		}
		args = append(args, object.PlayerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chatLogR{}
			}

			for _, a := range args {
				if a == obj.PlayerID {
					continue Outer
				}
			}

			args = append(args, obj.PlayerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`player`),
		qm.WhereIn(`player.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for player")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for player")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Player = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.ChatLogs = append(foreign.R.ChatLogs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PlayerID == foreign.ID {
				local.R.Player = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.ChatLogs = append(foreign.R.ChatLogs, local)
				break
			}
		}
	}

	return nil
}

// SetPlayer of the chatLog to the related item.
// Sets o.R.Player to related.
// Adds o to related.R.ChatLogs.
func (o *ChatLog) SetPlayer(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `chat_logs` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"player_id"}),
		strmangle.WhereClause("`", "`", 0, chatLogPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PlayerID = related.ID
	if o.R == nil {
		o.R = &chatLogR{
			Player: related,
		}
	} else {
		o.R.Player = related
	}

	if related.R == nil {
		related.R = &playerR{
			ChatLogs: ChatLogSlice{o},
		}
	} else {
		related.R.ChatLogs = append(related.R.ChatLogs, o)
	}

	return nil
}

// ChatLogs retrieves all the records using an executor.
func ChatLogs(mods ...qm.QueryMod) chatLogQuery {
	mods = append(mods, qm.From("`chat_logs`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`chat_logs`.*"})
	}

	return chatLogQuery{q}
}

// FindChatLog retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindChatLog(exec boil.Executor, iD int, selectCols ...string) (*ChatLog, error) {
	chatLogObj := &ChatLog{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `chat_logs` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, chatLogObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from chat_logs")
	}

	return chatLogObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ChatLog) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no chat_logs provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(chatLogColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	chatLogInsertCacheMut.RLock()
	cache, cached := chatLogInsertCache[key]
	chatLogInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			chatLogAllColumns,
			chatLogColumnsWithDefault,
			chatLogColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(chatLogType, chatLogMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(chatLogType, chatLogMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `chat_logs` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `chat_logs` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `chat_logs` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, chatLogPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into chat_logs")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == chatLogMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}
	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for chat_logs")
	}

CacheNoHooks:
	if !cached {
		chatLogInsertCacheMut.Lock()
		chatLogInsertCache[key] = cache
		chatLogInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the ChatLog.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ChatLog) Update(exec boil.Executor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	chatLogUpdateCacheMut.RLock()
	cache, cached := chatLogUpdateCache[key]
	chatLogUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			chatLogAllColumns,
			chatLogPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return errors.New("model: unable to update chat_logs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `chat_logs` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, chatLogPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(chatLogType, chatLogMapping, append(wl, chatLogPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update chat_logs row")
	}

	if !cached {
		chatLogUpdateCacheMut.Lock()
		chatLogUpdateCache[key] = cache
		chatLogUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q chatLogQuery) UpdateAll(exec boil.Executor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "model: unable to update all for chat_logs")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ChatLogSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chatLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `chat_logs` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, chatLogPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update all in chatLog slice")
	}

	return nil
}

var mySQLChatLogUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ChatLog) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no chat_logs provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(chatLogColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLChatLogUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	chatLogUpsertCacheMut.RLock()
	cache, cached := chatLogUpsertCache[key]
	chatLogUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			chatLogAllColumns,
			chatLogColumnsWithDefault,
			chatLogColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			chatLogAllColumns,
			chatLogPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("model: unable to upsert chat_logs, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`chat_logs`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `chat_logs` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(chatLogType, chatLogMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(chatLogType, chatLogMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for chat_logs")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == chatLogMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(chatLogType, chatLogMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model: unable to retrieve unique values for chat_logs")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}
	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for chat_logs")
	}

CacheNoHooks:
	if !cached {
		chatLogUpsertCacheMut.Lock()
		chatLogUpsertCache[key] = cache
		chatLogUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single ChatLog record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ChatLog) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("model: no ChatLog provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), chatLogPrimaryKeyMapping)
	sql := "DELETE FROM `chat_logs` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete from chat_logs")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q chatLogQuery) DeleteAll(exec boil.Executor) error {
	if q.Query == nil {
		return errors.New("model: no chatLogQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from chat_logs")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ChatLogSlice) DeleteAll(exec boil.Executor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chatLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `chat_logs` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, chatLogPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from chatLog slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ChatLog) Reload(exec boil.Executor) error {
	ret, err := FindChatLog(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ChatLogSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ChatLogSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chatLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `chat_logs`.* FROM `chat_logs` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, chatLogPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in ChatLogSlice")
	}

	*o = slice

	return nil
}

// ChatLogExists checks if the ChatLog row exists.
func ChatLogExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `chat_logs` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if chat_logs exists")
	}

	return exists, nil
}

// Exists checks if the ChatLog row exists.
func (o *ChatLog) Exists(exec boil.Executor) (bool, error) {
	return ChatLogExists(exec, o.ID)
}
