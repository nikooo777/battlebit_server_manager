// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Tool is an object representing the database table.
type Tool struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name      string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	IngameID  int       `boil:"ingame_id" json:"ingame_id" toml:"ingame_id" yaml:"ingame_id"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *toolR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L toolL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ToolColumns = struct {
	ID        string
	Name      string
	IngameID  string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	Name:      "name",
	IngameID:  "ingame_id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var ToolTableColumns = struct {
	ID        string
	Name      string
	IngameID  string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "tools.id",
	Name:      "tools.name",
	IngameID:  "tools.ingame_id",
	CreatedAt: "tools.created_at",
	UpdatedAt: "tools.updated_at",
}

// Generated where

var ToolWhere = struct {
	ID        whereHelperint
	Name      whereHelperstring
	IngameID  whereHelperint
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	ID:        whereHelperint{field: "`tools`.`id`"},
	Name:      whereHelperstring{field: "`tools`.`name`"},
	IngameID:  whereHelperint{field: "`tools`.`ingame_id`"},
	CreatedAt: whereHelpertime_Time{field: "`tools`.`created_at`"},
	UpdatedAt: whereHelpertime_Time{field: "`tools`.`updated_at`"},
}

// ToolRels is where relationship names are stored.
var ToolRels = struct {
}{}

// toolR is where relationships are stored.
type toolR struct {
}

// NewStruct creates a new relationship struct
func (*toolR) NewStruct() *toolR {
	return &toolR{}
}

// toolL is where Load methods for each relationship are stored.
type toolL struct{}

var (
	toolAllColumns            = []string{"id", "name", "ingame_id", "created_at", "updated_at"}
	toolColumnsWithoutDefault = []string{"name", "ingame_id"}
	toolColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	toolPrimaryKeyColumns     = []string{"id"}
	toolGeneratedColumns      = []string{}
)

type (
	// ToolSlice is an alias for a slice of pointers to Tool.
	// This should almost always be used instead of []Tool.
	ToolSlice []*Tool

	toolQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	toolType                 = reflect.TypeOf(&Tool{})
	toolMapping              = queries.MakeStructMapping(toolType)
	toolPrimaryKeyMapping, _ = queries.BindMapping(toolType, toolMapping, toolPrimaryKeyColumns)
	toolInsertCacheMut       sync.RWMutex
	toolInsertCache          = make(map[string]insertCache)
	toolUpdateCacheMut       sync.RWMutex
	toolUpdateCache          = make(map[string]updateCache)
	toolUpsertCacheMut       sync.RWMutex
	toolUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single tool record from the query.
func (q toolQuery) One(exec boil.Executor) (*Tool, error) {
	o := &Tool{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for tools")
	}

	return o, nil
}

// All returns all Tool records from the query.
func (q toolQuery) All(exec boil.Executor) (ToolSlice, error) {
	var o []*Tool

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to Tool slice")
	}

	return o, nil
}

// Count returns the count of all Tool records in the query.
func (q toolQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count tools rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q toolQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if tools exists")
	}

	return count > 0, nil
}

// Tools retrieves all the records using an executor.
func Tools(mods ...qm.QueryMod) toolQuery {
	mods = append(mods, qm.From("`tools`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`tools`.*"})
	}

	return toolQuery{q}
}

// FindTool retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTool(exec boil.Executor, iD int, selectCols ...string) (*Tool, error) {
	toolObj := &Tool{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `tools` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, toolObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from tools")
	}

	return toolObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Tool) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no tools provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(toolColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	toolInsertCacheMut.RLock()
	cache, cached := toolInsertCache[key]
	toolInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			toolAllColumns,
			toolColumnsWithDefault,
			toolColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(toolType, toolMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(toolType, toolMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `tools` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `tools` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `tools` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, toolPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into tools")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == toolMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}
	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for tools")
	}

CacheNoHooks:
	if !cached {
		toolInsertCacheMut.Lock()
		toolInsertCache[key] = cache
		toolInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Tool.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Tool) Update(exec boil.Executor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	toolUpdateCacheMut.RLock()
	cache, cached := toolUpdateCache[key]
	toolUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			toolAllColumns,
			toolPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return errors.New("model: unable to update tools, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `tools` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, toolPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(toolType, toolMapping, append(wl, toolPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update tools row")
	}

	if !cached {
		toolUpdateCacheMut.Lock()
		toolUpdateCache[key] = cache
		toolUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q toolQuery) UpdateAll(exec boil.Executor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "model: unable to update all for tools")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ToolSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), toolPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `tools` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, toolPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update all in tool slice")
	}

	return nil
}

var mySQLToolUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Tool) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no tools provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(toolColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLToolUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	toolUpsertCacheMut.RLock()
	cache, cached := toolUpsertCache[key]
	toolUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			toolAllColumns,
			toolColumnsWithDefault,
			toolColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			toolAllColumns,
			toolPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("model: unable to upsert tools, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`tools`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `tools` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(toolType, toolMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(toolType, toolMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for tools")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == toolMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(toolType, toolMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model: unable to retrieve unique values for tools")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}
	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for tools")
	}

CacheNoHooks:
	if !cached {
		toolUpsertCacheMut.Lock()
		toolUpsertCache[key] = cache
		toolUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Tool record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Tool) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("model: no Tool provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), toolPrimaryKeyMapping)
	sql := "DELETE FROM `tools` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete from tools")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q toolQuery) DeleteAll(exec boil.Executor) error {
	if q.Query == nil {
		return errors.New("model: no toolQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from tools")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ToolSlice) DeleteAll(exec boil.Executor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), toolPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `tools` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, toolPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from tool slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Tool) Reload(exec boil.Executor) error {
	ret, err := FindTool(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ToolSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ToolSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), toolPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `tools`.* FROM `tools` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, toolPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in ToolSlice")
	}

	*o = slice

	return nil
}

// ToolExists checks if the Tool row exists.
func ToolExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `tools` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if tools exists")
	}

	return exists, nil
}

// Exists checks if the Tool row exists.
func (o *Tool) Exists(exec boil.Executor) (bool, error) {
	return ToolExists(exec, o.ID)
}
