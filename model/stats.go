// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Stat is an object representing the database table.
type Stat struct {
	ID          int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	PlayerCount int       `boil:"player_count" json:"player_count" toml:"player_count" yaml:"player_count"`
	CreatedAt   time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *statR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L statL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StatColumns = struct {
	ID          string
	PlayerCount string
	CreatedAt   string
	UpdatedAt   string
}{
	ID:          "id",
	PlayerCount: "player_count",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
}

var StatTableColumns = struct {
	ID          string
	PlayerCount string
	CreatedAt   string
	UpdatedAt   string
}{
	ID:          "stats.id",
	PlayerCount: "stats.player_count",
	CreatedAt:   "stats.created_at",
	UpdatedAt:   "stats.updated_at",
}

// Generated where

var StatWhere = struct {
	ID          whereHelperint
	PlayerCount whereHelperint
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpertime_Time
}{
	ID:          whereHelperint{field: "`stats`.`id`"},
	PlayerCount: whereHelperint{field: "`stats`.`player_count`"},
	CreatedAt:   whereHelpertime_Time{field: "`stats`.`created_at`"},
	UpdatedAt:   whereHelpertime_Time{field: "`stats`.`updated_at`"},
}

// StatRels is where relationship names are stored.
var StatRels = struct {
}{}

// statR is where relationships are stored.
type statR struct {
}

// NewStruct creates a new relationship struct
func (*statR) NewStruct() *statR {
	return &statR{}
}

// statL is where Load methods for each relationship are stored.
type statL struct{}

var (
	statAllColumns            = []string{"id", "player_count", "created_at", "updated_at"}
	statColumnsWithoutDefault = []string{"player_count"}
	statColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	statPrimaryKeyColumns     = []string{"id"}
	statGeneratedColumns      = []string{}
)

type (
	// StatSlice is an alias for a slice of pointers to Stat.
	// This should almost always be used instead of []Stat.
	StatSlice []*Stat

	statQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	statType                 = reflect.TypeOf(&Stat{})
	statMapping              = queries.MakeStructMapping(statType)
	statPrimaryKeyMapping, _ = queries.BindMapping(statType, statMapping, statPrimaryKeyColumns)
	statInsertCacheMut       sync.RWMutex
	statInsertCache          = make(map[string]insertCache)
	statUpdateCacheMut       sync.RWMutex
	statUpdateCache          = make(map[string]updateCache)
	statUpsertCacheMut       sync.RWMutex
	statUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single stat record from the query.
func (q statQuery) One(exec boil.Executor) (*Stat, error) {
	o := &Stat{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for stats")
	}

	return o, nil
}

// All returns all Stat records from the query.
func (q statQuery) All(exec boil.Executor) (StatSlice, error) {
	var o []*Stat

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to Stat slice")
	}

	return o, nil
}

// Count returns the count of all Stat records in the query.
func (q statQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count stats rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q statQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if stats exists")
	}

	return count > 0, nil
}

// Stats retrieves all the records using an executor.
func Stats(mods ...qm.QueryMod) statQuery {
	mods = append(mods, qm.From("`stats`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`stats`.*"})
	}

	return statQuery{q}
}

// FindStat retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStat(exec boil.Executor, iD int, selectCols ...string) (*Stat, error) {
	statObj := &Stat{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `stats` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, statObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from stats")
	}

	return statObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Stat) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no stats provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(statColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	statInsertCacheMut.RLock()
	cache, cached := statInsertCache[key]
	statInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			statAllColumns,
			statColumnsWithDefault,
			statColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(statType, statMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(statType, statMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `stats` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `stats` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `stats` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, statPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into stats")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == statMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}
	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for stats")
	}

CacheNoHooks:
	if !cached {
		statInsertCacheMut.Lock()
		statInsertCache[key] = cache
		statInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Stat.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Stat) Update(exec boil.Executor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	statUpdateCacheMut.RLock()
	cache, cached := statUpdateCache[key]
	statUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			statAllColumns,
			statPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return errors.New("model: unable to update stats, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `stats` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, statPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(statType, statMapping, append(wl, statPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update stats row")
	}

	if !cached {
		statUpdateCacheMut.Lock()
		statUpdateCache[key] = cache
		statUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q statQuery) UpdateAll(exec boil.Executor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "model: unable to update all for stats")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StatSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), statPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `stats` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, statPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update all in stat slice")
	}

	return nil
}

var mySQLStatUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Stat) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no stats provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(statColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLStatUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	statUpsertCacheMut.RLock()
	cache, cached := statUpsertCache[key]
	statUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			statAllColumns,
			statColumnsWithDefault,
			statColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			statAllColumns,
			statPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("model: unable to upsert stats, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`stats`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `stats` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(statType, statMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(statType, statMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for stats")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == statMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(statType, statMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model: unable to retrieve unique values for stats")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}
	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for stats")
	}

CacheNoHooks:
	if !cached {
		statUpsertCacheMut.Lock()
		statUpsertCache[key] = cache
		statUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Stat record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Stat) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("model: no Stat provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), statPrimaryKeyMapping)
	sql := "DELETE FROM `stats` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete from stats")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q statQuery) DeleteAll(exec boil.Executor) error {
	if q.Query == nil {
		return errors.New("model: no statQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from stats")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StatSlice) DeleteAll(exec boil.Executor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), statPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `stats` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, statPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from stat slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Stat) Reload(exec boil.Executor) error {
	ret, err := FindStat(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StatSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StatSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), statPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `stats`.* FROM `stats` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, statPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in StatSlice")
	}

	*o = slice

	return nil
}

// StatExists checks if the Stat row exists.
func StatExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `stats` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if stats exists")
	}

	return exists, nil
}

// Exists checks if the Stat row exists.
func (o *Stat) Exists(exec boil.Executor) (bool, error) {
	return StatExists(exec, o.ID)
}
