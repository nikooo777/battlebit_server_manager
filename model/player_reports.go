// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PlayerReport is an object representing the database table.
type PlayerReport struct {
	ID               int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	ReporterID       null.Int    `boil:"reporter_id" json:"reporter_id,omitempty" toml:"reporter_id" yaml:"reporter_id,omitempty"`
	ReportedPlayerID int         `boil:"reported_player_id" json:"reported_player_id" toml:"reported_player_id" yaml:"reported_player_id"`
	Reason           string      `boil:"reason" json:"reason" toml:"reason" yaml:"reason"`
	Timestamp        time.Time   `boil:"timestamp" json:"timestamp" toml:"timestamp" yaml:"timestamp"`
	Status           string      `boil:"status" json:"status" toml:"status" yaml:"status"`
	AdminNotes       null.String `boil:"admin_notes" json:"admin_notes,omitempty" toml:"admin_notes" yaml:"admin_notes,omitempty"`

	R *playerReportR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L playerReportL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PlayerReportColumns = struct {
	ID               string
	ReporterID       string
	ReportedPlayerID string
	Reason           string
	Timestamp        string
	Status           string
	AdminNotes       string
}{
	ID:               "id",
	ReporterID:       "reporter_id",
	ReportedPlayerID: "reported_player_id",
	Reason:           "reason",
	Timestamp:        "timestamp",
	Status:           "status",
	AdminNotes:       "admin_notes",
}

var PlayerReportTableColumns = struct {
	ID               string
	ReporterID       string
	ReportedPlayerID string
	Reason           string
	Timestamp        string
	Status           string
	AdminNotes       string
}{
	ID:               "player_reports.id",
	ReporterID:       "player_reports.reporter_id",
	ReportedPlayerID: "player_reports.reported_player_id",
	Reason:           "player_reports.reason",
	Timestamp:        "player_reports.timestamp",
	Status:           "player_reports.status",
	AdminNotes:       "player_reports.admin_notes",
}

// Generated where

var PlayerReportWhere = struct {
	ID               whereHelperint
	ReporterID       whereHelpernull_Int
	ReportedPlayerID whereHelperint
	Reason           whereHelperstring
	Timestamp        whereHelpertime_Time
	Status           whereHelperstring
	AdminNotes       whereHelpernull_String
}{
	ID:               whereHelperint{field: "`player_reports`.`id`"},
	ReporterID:       whereHelpernull_Int{field: "`player_reports`.`reporter_id`"},
	ReportedPlayerID: whereHelperint{field: "`player_reports`.`reported_player_id`"},
	Reason:           whereHelperstring{field: "`player_reports`.`reason`"},
	Timestamp:        whereHelpertime_Time{field: "`player_reports`.`timestamp`"},
	Status:           whereHelperstring{field: "`player_reports`.`status`"},
	AdminNotes:       whereHelpernull_String{field: "`player_reports`.`admin_notes`"},
}

// PlayerReportRels is where relationship names are stored.
var PlayerReportRels = struct {
	Reporter       string
	ReportedPlayer string
}{
	Reporter:       "Reporter",
	ReportedPlayer: "ReportedPlayer",
}

// playerReportR is where relationships are stored.
type playerReportR struct {
	Reporter       *Player `boil:"Reporter" json:"Reporter" toml:"Reporter" yaml:"Reporter"`
	ReportedPlayer *Player `boil:"ReportedPlayer" json:"ReportedPlayer" toml:"ReportedPlayer" yaml:"ReportedPlayer"`
}

// NewStruct creates a new relationship struct
func (*playerReportR) NewStruct() *playerReportR {
	return &playerReportR{}
}

func (r *playerReportR) GetReporter() *Player {
	if r == nil {
		return nil
	}
	return r.Reporter
}

func (r *playerReportR) GetReportedPlayer() *Player {
	if r == nil {
		return nil
	}
	return r.ReportedPlayer
}

// playerReportL is where Load methods for each relationship are stored.
type playerReportL struct{}

var (
	playerReportAllColumns            = []string{"id", "reporter_id", "reported_player_id", "reason", "timestamp", "status", "admin_notes"}
	playerReportColumnsWithoutDefault = []string{"reporter_id", "reported_player_id", "reason", "timestamp", "status", "admin_notes"}
	playerReportColumnsWithDefault    = []string{"id"}
	playerReportPrimaryKeyColumns     = []string{"id"}
	playerReportGeneratedColumns      = []string{}
)

type (
	// PlayerReportSlice is an alias for a slice of pointers to PlayerReport.
	// This should almost always be used instead of []PlayerReport.
	PlayerReportSlice []*PlayerReport

	playerReportQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	playerReportType                 = reflect.TypeOf(&PlayerReport{})
	playerReportMapping              = queries.MakeStructMapping(playerReportType)
	playerReportPrimaryKeyMapping, _ = queries.BindMapping(playerReportType, playerReportMapping, playerReportPrimaryKeyColumns)
	playerReportInsertCacheMut       sync.RWMutex
	playerReportInsertCache          = make(map[string]insertCache)
	playerReportUpdateCacheMut       sync.RWMutex
	playerReportUpdateCache          = make(map[string]updateCache)
	playerReportUpsertCacheMut       sync.RWMutex
	playerReportUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single playerReport record from the query.
func (q playerReportQuery) One(exec boil.Executor) (*PlayerReport, error) {
	o := &PlayerReport{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for player_reports")
	}

	return o, nil
}

// All returns all PlayerReport records from the query.
func (q playerReportQuery) All(exec boil.Executor) (PlayerReportSlice, error) {
	var o []*PlayerReport

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to PlayerReport slice")
	}

	return o, nil
}

// Count returns the count of all PlayerReport records in the query.
func (q playerReportQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count player_reports rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q playerReportQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if player_reports exists")
	}

	return count > 0, nil
}

// Reporter pointed to by the foreign key.
func (o *PlayerReport) Reporter(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.ReporterID),
	}

	queryMods = append(queryMods, mods...)

	return Players(queryMods...)
}

// ReportedPlayer pointed to by the foreign key.
func (o *PlayerReport) ReportedPlayer(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.ReportedPlayerID),
	}

	queryMods = append(queryMods, mods...)

	return Players(queryMods...)
}

// LoadReporter allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (playerReportL) LoadReporter(e boil.Executor, singular bool, maybePlayerReport interface{}, mods queries.Applicator) error {
	var slice []*PlayerReport
	var object *PlayerReport

	if singular {
		var ok bool
		object, ok = maybePlayerReport.(*PlayerReport)
		if !ok {
			object = new(PlayerReport)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePlayerReport)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePlayerReport))
			}
		}
	} else {
		s, ok := maybePlayerReport.(*[]*PlayerReport)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePlayerReport)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePlayerReport))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &playerReportR{}
		}
		if !queries.IsNil(object.ReporterID) {
			args = append(args, object.ReporterID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &playerReportR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ReporterID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ReporterID) {
				args = append(args, obj.ReporterID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`player`),
		qm.WhereIn(`player.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for player")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for player")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Reporter = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.ReporterPlayerReports = append(foreign.R.ReporterPlayerReports, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ReporterID, foreign.ID) {
				local.R.Reporter = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.ReporterPlayerReports = append(foreign.R.ReporterPlayerReports, local)
				break
			}
		}
	}

	return nil
}

// LoadReportedPlayer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (playerReportL) LoadReportedPlayer(e boil.Executor, singular bool, maybePlayerReport interface{}, mods queries.Applicator) error {
	var slice []*PlayerReport
	var object *PlayerReport

	if singular {
		var ok bool
		object, ok = maybePlayerReport.(*PlayerReport)
		if !ok {
			object = new(PlayerReport)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePlayerReport)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePlayerReport))
			}
		}
	} else {
		s, ok := maybePlayerReport.(*[]*PlayerReport)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePlayerReport)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePlayerReport))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &playerReportR{}
		}
		args = append(args, object.ReportedPlayerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &playerReportR{}
			}

			for _, a := range args {
				if a == obj.ReportedPlayerID {
					continue Outer
				}
			}

			args = append(args, obj.ReportedPlayerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`player`),
		qm.WhereIn(`player.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for player")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for player")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ReportedPlayer = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.ReportedPlayerPlayerReports = append(foreign.R.ReportedPlayerPlayerReports, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ReportedPlayerID == foreign.ID {
				local.R.ReportedPlayer = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.ReportedPlayerPlayerReports = append(foreign.R.ReportedPlayerPlayerReports, local)
				break
			}
		}
	}

	return nil
}

// SetReporter of the playerReport to the related item.
// Sets o.R.Reporter to related.
// Adds o to related.R.ReporterPlayerReports.
func (o *PlayerReport) SetReporter(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `player_reports` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"reporter_id"}),
		strmangle.WhereClause("`", "`", 0, playerReportPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ReporterID, related.ID)
	if o.R == nil {
		o.R = &playerReportR{
			Reporter: related,
		}
	} else {
		o.R.Reporter = related
	}

	if related.R == nil {
		related.R = &playerR{
			ReporterPlayerReports: PlayerReportSlice{o},
		}
	} else {
		related.R.ReporterPlayerReports = append(related.R.ReporterPlayerReports, o)
	}

	return nil
}

// RemoveReporter relationship.
// Sets o.R.Reporter to nil.
// Removes o from all passed in related items' relationships struct.
func (o *PlayerReport) RemoveReporter(exec boil.Executor, related *Player) error {
	var err error

	queries.SetScanner(&o.ReporterID, nil)
	if err = o.Update(exec, boil.Whitelist("reporter_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Reporter = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ReporterPlayerReports {
		if queries.Equal(o.ReporterID, ri.ReporterID) {
			continue
		}

		ln := len(related.R.ReporterPlayerReports)
		if ln > 1 && i < ln-1 {
			related.R.ReporterPlayerReports[i] = related.R.ReporterPlayerReports[ln-1]
		}
		related.R.ReporterPlayerReports = related.R.ReporterPlayerReports[:ln-1]
		break
	}
	return nil
}

// SetReportedPlayer of the playerReport to the related item.
// Sets o.R.ReportedPlayer to related.
// Adds o to related.R.ReportedPlayerPlayerReports.
func (o *PlayerReport) SetReportedPlayer(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `player_reports` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"reported_player_id"}),
		strmangle.WhereClause("`", "`", 0, playerReportPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ReportedPlayerID = related.ID
	if o.R == nil {
		o.R = &playerReportR{
			ReportedPlayer: related,
		}
	} else {
		o.R.ReportedPlayer = related
	}

	if related.R == nil {
		related.R = &playerR{
			ReportedPlayerPlayerReports: PlayerReportSlice{o},
		}
	} else {
		related.R.ReportedPlayerPlayerReports = append(related.R.ReportedPlayerPlayerReports, o)
	}

	return nil
}

// PlayerReports retrieves all the records using an executor.
func PlayerReports(mods ...qm.QueryMod) playerReportQuery {
	mods = append(mods, qm.From("`player_reports`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`player_reports`.*"})
	}

	return playerReportQuery{q}
}

// FindPlayerReport retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPlayerReport(exec boil.Executor, iD int, selectCols ...string) (*PlayerReport, error) {
	playerReportObj := &PlayerReport{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `player_reports` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, playerReportObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from player_reports")
	}

	return playerReportObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PlayerReport) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no player_reports provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(playerReportColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	playerReportInsertCacheMut.RLock()
	cache, cached := playerReportInsertCache[key]
	playerReportInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			playerReportAllColumns,
			playerReportColumnsWithDefault,
			playerReportColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(playerReportType, playerReportMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(playerReportType, playerReportMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `player_reports` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `player_reports` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `player_reports` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, playerReportPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into player_reports")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == playerReportMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}
	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for player_reports")
	}

CacheNoHooks:
	if !cached {
		playerReportInsertCacheMut.Lock()
		playerReportInsertCache[key] = cache
		playerReportInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the PlayerReport.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PlayerReport) Update(exec boil.Executor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	playerReportUpdateCacheMut.RLock()
	cache, cached := playerReportUpdateCache[key]
	playerReportUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			playerReportAllColumns,
			playerReportPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return errors.New("model: unable to update player_reports, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `player_reports` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, playerReportPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(playerReportType, playerReportMapping, append(wl, playerReportPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update player_reports row")
	}

	if !cached {
		playerReportUpdateCacheMut.Lock()
		playerReportUpdateCache[key] = cache
		playerReportUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q playerReportQuery) UpdateAll(exec boil.Executor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "model: unable to update all for player_reports")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PlayerReportSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playerReportPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `player_reports` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, playerReportPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update all in playerReport slice")
	}

	return nil
}

var mySQLPlayerReportUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PlayerReport) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no player_reports provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(playerReportColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLPlayerReportUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	playerReportUpsertCacheMut.RLock()
	cache, cached := playerReportUpsertCache[key]
	playerReportUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			playerReportAllColumns,
			playerReportColumnsWithDefault,
			playerReportColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			playerReportAllColumns,
			playerReportPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("model: unable to upsert player_reports, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`player_reports`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `player_reports` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(playerReportType, playerReportMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(playerReportType, playerReportMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for player_reports")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == playerReportMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(playerReportType, playerReportMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model: unable to retrieve unique values for player_reports")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}
	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for player_reports")
	}

CacheNoHooks:
	if !cached {
		playerReportUpsertCacheMut.Lock()
		playerReportUpsertCache[key] = cache
		playerReportUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single PlayerReport record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PlayerReport) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("model: no PlayerReport provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), playerReportPrimaryKeyMapping)
	sql := "DELETE FROM `player_reports` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete from player_reports")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q playerReportQuery) DeleteAll(exec boil.Executor) error {
	if q.Query == nil {
		return errors.New("model: no playerReportQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from player_reports")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PlayerReportSlice) DeleteAll(exec boil.Executor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playerReportPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `player_reports` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, playerReportPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from playerReport slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PlayerReport) Reload(exec boil.Executor) error {
	ret, err := FindPlayerReport(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PlayerReportSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PlayerReportSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playerReportPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `player_reports`.* FROM `player_reports` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, playerReportPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in PlayerReportSlice")
	}

	*o = slice

	return nil
}

// PlayerReportExists checks if the PlayerReport row exists.
func PlayerReportExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `player_reports` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if player_reports exists")
	}

	return exists, nil
}

// Exists checks if the PlayerReport row exists.
func (o *PlayerReport) Exists(exec boil.Executor) (bool, error) {
	return PlayerReportExists(exec, o.ID)
}
