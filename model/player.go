// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Player is an object representing the database table.
type Player struct {
	ID           int        `boil:"id" json:"id" toml:"id" yaml:"id"`
	SteamID      int64      `boil:"steam_id" json:"steam_id" toml:"steam_id" yaml:"steam_id"`
	Name         string     `boil:"name" json:"name" toml:"name" yaml:"name"`
	IsBanned     bool       `boil:"is_banned" json:"is_banned" toml:"is_banned" yaml:"is_banned"`
	Roles        null.Int   `boil:"roles" json:"roles,omitempty" toml:"roles" yaml:"roles,omitempty"`
	Achievements null.Bytes `boil:"achievements" json:"achievements,omitempty" toml:"achievements" yaml:"achievements,omitempty"`
	Selections   null.Bytes `boil:"selections" json:"selections,omitempty" toml:"selections" yaml:"selections,omitempty"`
	ToolProgress null.Bytes `boil:"tool_progress" json:"tool_progress,omitempty" toml:"tool_progress" yaml:"tool_progress,omitempty"`
	CreatedAt    time.Time  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt    time.Time  `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *playerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L playerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PlayerColumns = struct {
	ID           string
	SteamID      string
	Name         string
	IsBanned     string
	Roles        string
	Achievements string
	Selections   string
	ToolProgress string
	CreatedAt    string
	UpdatedAt    string
}{
	ID:           "id",
	SteamID:      "steam_id",
	Name:         "name",
	IsBanned:     "is_banned",
	Roles:        "roles",
	Achievements: "achievements",
	Selections:   "selections",
	ToolProgress: "tool_progress",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
}

var PlayerTableColumns = struct {
	ID           string
	SteamID      string
	Name         string
	IsBanned     string
	Roles        string
	Achievements string
	Selections   string
	ToolProgress string
	CreatedAt    string
	UpdatedAt    string
}{
	ID:           "player.id",
	SteamID:      "player.steam_id",
	Name:         "player.name",
	IsBanned:     "player.is_banned",
	Roles:        "player.roles",
	Achievements: "player.achievements",
	Selections:   "player.selections",
	ToolProgress: "player.tool_progress",
	CreatedAt:    "player.created_at",
	UpdatedAt:    "player.updated_at",
}

// Generated where

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Bytes struct{ field string }

func (w whereHelpernull_Bytes) EQ(x null.Bytes) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bytes) NEQ(x null.Bytes) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bytes) LT(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bytes) LTE(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bytes) GT(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bytes) GTE(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bytes) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bytes) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var PlayerWhere = struct {
	ID           whereHelperint
	SteamID      whereHelperint64
	Name         whereHelperstring
	IsBanned     whereHelperbool
	Roles        whereHelpernull_Int
	Achievements whereHelpernull_Bytes
	Selections   whereHelpernull_Bytes
	ToolProgress whereHelpernull_Bytes
	CreatedAt    whereHelpertime_Time
	UpdatedAt    whereHelpertime_Time
}{
	ID:           whereHelperint{field: "`player`.`id`"},
	SteamID:      whereHelperint64{field: "`player`.`steam_id`"},
	Name:         whereHelperstring{field: "`player`.`name`"},
	IsBanned:     whereHelperbool{field: "`player`.`is_banned`"},
	Roles:        whereHelpernull_Int{field: "`player`.`roles`"},
	Achievements: whereHelpernull_Bytes{field: "`player`.`achievements`"},
	Selections:   whereHelpernull_Bytes{field: "`player`.`selections`"},
	ToolProgress: whereHelpernull_Bytes{field: "`player`.`tool_progress`"},
	CreatedAt:    whereHelpertime_Time{field: "`player`.`created_at`"},
	UpdatedAt:    whereHelpertime_Time{field: "`player`.`updated_at`"},
}

// PlayerRels is where relationship names are stored.
var PlayerRels = struct {
	PlayerProgress              string
	ChatLogs                    string
	ReporterPlayerReports       string
	ReportedPlayerPlayerReports string
}{
	PlayerProgress:              "PlayerProgress",
	ChatLogs:                    "ChatLogs",
	ReporterPlayerReports:       "ReporterPlayerReports",
	ReportedPlayerPlayerReports: "ReportedPlayerPlayerReports",
}

// playerR is where relationships are stored.
type playerR struct {
	PlayerProgress              *PlayerProgress   `boil:"PlayerProgress" json:"PlayerProgress" toml:"PlayerProgress" yaml:"PlayerProgress"`
	ChatLogs                    ChatLogSlice      `boil:"ChatLogs" json:"ChatLogs" toml:"ChatLogs" yaml:"ChatLogs"`
	ReporterPlayerReports       PlayerReportSlice `boil:"ReporterPlayerReports" json:"ReporterPlayerReports" toml:"ReporterPlayerReports" yaml:"ReporterPlayerReports"`
	ReportedPlayerPlayerReports PlayerReportSlice `boil:"ReportedPlayerPlayerReports" json:"ReportedPlayerPlayerReports" toml:"ReportedPlayerPlayerReports" yaml:"ReportedPlayerPlayerReports"`
}

// NewStruct creates a new relationship struct
func (*playerR) NewStruct() *playerR {
	return &playerR{}
}

func (r *playerR) GetPlayerProgress() *PlayerProgress {
	if r == nil {
		return nil
	}
	return r.PlayerProgress
}

func (r *playerR) GetChatLogs() ChatLogSlice {
	if r == nil {
		return nil
	}
	return r.ChatLogs
}

func (r *playerR) GetReporterPlayerReports() PlayerReportSlice {
	if r == nil {
		return nil
	}
	return r.ReporterPlayerReports
}

func (r *playerR) GetReportedPlayerPlayerReports() PlayerReportSlice {
	if r == nil {
		return nil
	}
	return r.ReportedPlayerPlayerReports
}

// playerL is where Load methods for each relationship are stored.
type playerL struct{}

var (
	playerAllColumns            = []string{"id", "steam_id", "name", "is_banned", "roles", "achievements", "selections", "tool_progress", "created_at", "updated_at"}
	playerColumnsWithoutDefault = []string{"steam_id", "name", "is_banned", "roles", "achievements", "selections", "tool_progress"}
	playerColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	playerPrimaryKeyColumns     = []string{"id"}
	playerGeneratedColumns      = []string{}
)

type (
	// PlayerSlice is an alias for a slice of pointers to Player.
	// This should almost always be used instead of []Player.
	PlayerSlice []*Player

	playerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	playerType                 = reflect.TypeOf(&Player{})
	playerMapping              = queries.MakeStructMapping(playerType)
	playerPrimaryKeyMapping, _ = queries.BindMapping(playerType, playerMapping, playerPrimaryKeyColumns)
	playerInsertCacheMut       sync.RWMutex
	playerInsertCache          = make(map[string]insertCache)
	playerUpdateCacheMut       sync.RWMutex
	playerUpdateCache          = make(map[string]updateCache)
	playerUpsertCacheMut       sync.RWMutex
	playerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single player record from the query.
func (q playerQuery) One(exec boil.Executor) (*Player, error) {
	o := &Player{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for player")
	}

	return o, nil
}

// All returns all Player records from the query.
func (q playerQuery) All(exec boil.Executor) (PlayerSlice, error) {
	var o []*Player

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to Player slice")
	}

	return o, nil
}

// Count returns the count of all Player records in the query.
func (q playerQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count player rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q playerQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if player exists")
	}

	return count > 0, nil
}

// PlayerProgress pointed to by the foreign key.
func (o *Player) PlayerProgress(mods ...qm.QueryMod) playerProgressQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`player_id` = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	return PlayerProgresses(queryMods...)
}

// ChatLogs retrieves all the chat_log's ChatLogs with an executor.
func (o *Player) ChatLogs(mods ...qm.QueryMod) chatLogQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`chat_logs`.`player_id`=?", o.ID),
	)

	return ChatLogs(queryMods...)
}

// ReporterPlayerReports retrieves all the player_report's PlayerReports with an executor via reporter_id column.
func (o *Player) ReporterPlayerReports(mods ...qm.QueryMod) playerReportQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`player_reports`.`reporter_id`=?", o.ID),
	)

	return PlayerReports(queryMods...)
}

// ReportedPlayerPlayerReports retrieves all the player_report's PlayerReports with an executor via reported_player_id column.
func (o *Player) ReportedPlayerPlayerReports(mods ...qm.QueryMod) playerReportQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`player_reports`.`reported_player_id`=?", o.ID),
	)

	return PlayerReports(queryMods...)
}

// LoadPlayerProgress allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (playerL) LoadPlayerProgress(e boil.Executor, singular bool, maybePlayer interface{}, mods queries.Applicator) error {
	var slice []*Player
	var object *Player

	if singular {
		var ok bool
		object, ok = maybePlayer.(*Player)
		if !ok {
			object = new(Player)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePlayer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePlayer))
			}
		}
	} else {
		s, ok := maybePlayer.(*[]*Player)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePlayer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePlayer))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &playerR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &playerR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`player_progress`),
		qm.WhereIn(`player_progress.player_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PlayerProgress")
	}

	var resultSlice []*PlayerProgress
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PlayerProgress")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for player_progress")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for player_progress")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PlayerProgress = foreign
		if foreign.R == nil {
			foreign.R = &playerProgressR{}
		}
		foreign.R.Player = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ID, foreign.PlayerID) {
				local.R.PlayerProgress = foreign
				if foreign.R == nil {
					foreign.R = &playerProgressR{}
				}
				foreign.R.Player = local
				break
			}
		}
	}

	return nil
}

// LoadChatLogs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (playerL) LoadChatLogs(e boil.Executor, singular bool, maybePlayer interface{}, mods queries.Applicator) error {
	var slice []*Player
	var object *Player

	if singular {
		var ok bool
		object, ok = maybePlayer.(*Player)
		if !ok {
			object = new(Player)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePlayer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePlayer))
			}
		}
	} else {
		s, ok := maybePlayer.(*[]*Player)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePlayer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePlayer))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &playerR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &playerR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`chat_logs`),
		qm.WhereIn(`chat_logs.player_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load chat_logs")
	}

	var resultSlice []*ChatLog
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice chat_logs")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on chat_logs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for chat_logs")
	}

	if singular {
		object.R.ChatLogs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &chatLogR{}
			}
			foreign.R.Player = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PlayerID {
				local.R.ChatLogs = append(local.R.ChatLogs, foreign)
				if foreign.R == nil {
					foreign.R = &chatLogR{}
				}
				foreign.R.Player = local
				break
			}
		}
	}

	return nil
}

// LoadReporterPlayerReports allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (playerL) LoadReporterPlayerReports(e boil.Executor, singular bool, maybePlayer interface{}, mods queries.Applicator) error {
	var slice []*Player
	var object *Player

	if singular {
		var ok bool
		object, ok = maybePlayer.(*Player)
		if !ok {
			object = new(Player)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePlayer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePlayer))
			}
		}
	} else {
		s, ok := maybePlayer.(*[]*Player)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePlayer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePlayer))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &playerR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &playerR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`player_reports`),
		qm.WhereIn(`player_reports.reporter_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load player_reports")
	}

	var resultSlice []*PlayerReport
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice player_reports")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on player_reports")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for player_reports")
	}

	if singular {
		object.R.ReporterPlayerReports = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &playerReportR{}
			}
			foreign.R.Reporter = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ReporterID) {
				local.R.ReporterPlayerReports = append(local.R.ReporterPlayerReports, foreign)
				if foreign.R == nil {
					foreign.R = &playerReportR{}
				}
				foreign.R.Reporter = local
				break
			}
		}
	}

	return nil
}

// LoadReportedPlayerPlayerReports allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (playerL) LoadReportedPlayerPlayerReports(e boil.Executor, singular bool, maybePlayer interface{}, mods queries.Applicator) error {
	var slice []*Player
	var object *Player

	if singular {
		var ok bool
		object, ok = maybePlayer.(*Player)
		if !ok {
			object = new(Player)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePlayer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePlayer))
			}
		}
	} else {
		s, ok := maybePlayer.(*[]*Player)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePlayer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePlayer))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &playerR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &playerR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`player_reports`),
		qm.WhereIn(`player_reports.reported_player_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load player_reports")
	}

	var resultSlice []*PlayerReport
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice player_reports")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on player_reports")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for player_reports")
	}

	if singular {
		object.R.ReportedPlayerPlayerReports = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &playerReportR{}
			}
			foreign.R.ReportedPlayer = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ReportedPlayerID {
				local.R.ReportedPlayerPlayerReports = append(local.R.ReportedPlayerPlayerReports, foreign)
				if foreign.R == nil {
					foreign.R = &playerReportR{}
				}
				foreign.R.ReportedPlayer = local
				break
			}
		}
	}

	return nil
}

// SetPlayerProgress of the player to the related item.
// Sets o.R.PlayerProgress to related.
// Adds o to related.R.Player.
func (o *Player) SetPlayerProgress(exec boil.Executor, insert bool, related *PlayerProgress) error {
	var err error

	if insert {
		queries.Assign(&related.PlayerID, o.ID)

		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE `player_progress` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, []string{"player_id"}),
			strmangle.WhereClause("`", "`", 0, playerProgressPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, updateQuery)
			fmt.Fprintln(boil.DebugWriter, values)
		}
		if _, err = exec.Exec(updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		queries.Assign(&related.PlayerID, o.ID)
	}

	if o.R == nil {
		o.R = &playerR{
			PlayerProgress: related,
		}
	} else {
		o.R.PlayerProgress = related
	}

	if related.R == nil {
		related.R = &playerProgressR{
			Player: o,
		}
	} else {
		related.R.Player = o
	}
	return nil
}

// RemovePlayerProgress relationship.
// Sets o.R.PlayerProgress to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Player) RemovePlayerProgress(exec boil.Executor, related *PlayerProgress) error {
	var err error

	queries.SetScanner(&related.PlayerID, nil)
	if err = related.Update(exec, boil.Whitelist("player_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.PlayerProgress = nil
	}

	if related == nil || related.R == nil {
		return nil
	}

	related.R.Player = nil

	return nil
}

// AddChatLogs adds the given related objects to the existing relationships
// of the player, optionally inserting them as new records.
// Appends related to o.R.ChatLogs.
// Sets related.R.Player appropriately.
func (o *Player) AddChatLogs(exec boil.Executor, insert bool, related ...*ChatLog) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PlayerID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `chat_logs` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"player_id"}),
				strmangle.WhereClause("`", "`", 0, chatLogPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PlayerID = o.ID
		}
	}

	if o.R == nil {
		o.R = &playerR{
			ChatLogs: related,
		}
	} else {
		o.R.ChatLogs = append(o.R.ChatLogs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &chatLogR{
				Player: o,
			}
		} else {
			rel.R.Player = o
		}
	}
	return nil
}

// AddReporterPlayerReports adds the given related objects to the existing relationships
// of the player, optionally inserting them as new records.
// Appends related to o.R.ReporterPlayerReports.
// Sets related.R.Reporter appropriately.
func (o *Player) AddReporterPlayerReports(exec boil.Executor, insert bool, related ...*PlayerReport) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ReporterID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `player_reports` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"reporter_id"}),
				strmangle.WhereClause("`", "`", 0, playerReportPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ReporterID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &playerR{
			ReporterPlayerReports: related,
		}
	} else {
		o.R.ReporterPlayerReports = append(o.R.ReporterPlayerReports, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &playerReportR{
				Reporter: o,
			}
		} else {
			rel.R.Reporter = o
		}
	}
	return nil
}

// SetReporterPlayerReports removes all previously related items of the
// player replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Reporter's ReporterPlayerReports accordingly.
// Replaces o.R.ReporterPlayerReports with related.
// Sets related.R.Reporter's ReporterPlayerReports accordingly.
func (o *Player) SetReporterPlayerReports(exec boil.Executor, insert bool, related ...*PlayerReport) error {
	query := "update `player_reports` set `reporter_id` = null where `reporter_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ReporterPlayerReports {
			queries.SetScanner(&rel.ReporterID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Reporter = nil
		}
		o.R.ReporterPlayerReports = nil
	}

	return o.AddReporterPlayerReports(exec, insert, related...)
}

// RemoveReporterPlayerReports relationships from objects passed in.
// Removes related items from R.ReporterPlayerReports (uses pointer comparison, removal does not keep order)
// Sets related.R.Reporter.
func (o *Player) RemoveReporterPlayerReports(exec boil.Executor, related ...*PlayerReport) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ReporterID, nil)
		if rel.R != nil {
			rel.R.Reporter = nil
		}
		if err = rel.Update(exec, boil.Whitelist("reporter_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ReporterPlayerReports {
			if rel != ri {
				continue
			}

			ln := len(o.R.ReporterPlayerReports)
			if ln > 1 && i < ln-1 {
				o.R.ReporterPlayerReports[i] = o.R.ReporterPlayerReports[ln-1]
			}
			o.R.ReporterPlayerReports = o.R.ReporterPlayerReports[:ln-1]
			break
		}
	}

	return nil
}

// AddReportedPlayerPlayerReports adds the given related objects to the existing relationships
// of the player, optionally inserting them as new records.
// Appends related to o.R.ReportedPlayerPlayerReports.
// Sets related.R.ReportedPlayer appropriately.
func (o *Player) AddReportedPlayerPlayerReports(exec boil.Executor, insert bool, related ...*PlayerReport) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ReportedPlayerID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `player_reports` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"reported_player_id"}),
				strmangle.WhereClause("`", "`", 0, playerReportPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ReportedPlayerID = o.ID
		}
	}

	if o.R == nil {
		o.R = &playerR{
			ReportedPlayerPlayerReports: related,
		}
	} else {
		o.R.ReportedPlayerPlayerReports = append(o.R.ReportedPlayerPlayerReports, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &playerReportR{
				ReportedPlayer: o,
			}
		} else {
			rel.R.ReportedPlayer = o
		}
	}
	return nil
}

// Players retrieves all the records using an executor.
func Players(mods ...qm.QueryMod) playerQuery {
	mods = append(mods, qm.From("`player`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`player`.*"})
	}

	return playerQuery{q}
}

// FindPlayer retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPlayer(exec boil.Executor, iD int, selectCols ...string) (*Player, error) {
	playerObj := &Player{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `player` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, playerObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from player")
	}

	return playerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Player) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no player provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(playerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	playerInsertCacheMut.RLock()
	cache, cached := playerInsertCache[key]
	playerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			playerAllColumns,
			playerColumnsWithDefault,
			playerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(playerType, playerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(playerType, playerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `player` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `player` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `player` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, playerPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into player")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == playerMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}
	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for player")
	}

CacheNoHooks:
	if !cached {
		playerInsertCacheMut.Lock()
		playerInsertCache[key] = cache
		playerInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Player.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Player) Update(exec boil.Executor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	playerUpdateCacheMut.RLock()
	cache, cached := playerUpdateCache[key]
	playerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			playerAllColumns,
			playerPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return errors.New("model: unable to update player, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `player` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, playerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(playerType, playerMapping, append(wl, playerPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update player row")
	}

	if !cached {
		playerUpdateCacheMut.Lock()
		playerUpdateCache[key] = cache
		playerUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q playerQuery) UpdateAll(exec boil.Executor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "model: unable to update all for player")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PlayerSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `player` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, playerPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update all in player slice")
	}

	return nil
}

var mySQLPlayerUniqueColumns = []string{
	"id",
	"steam_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Player) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no player provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(playerColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLPlayerUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	playerUpsertCacheMut.RLock()
	cache, cached := playerUpsertCache[key]
	playerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			playerAllColumns,
			playerColumnsWithDefault,
			playerColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			playerAllColumns,
			playerPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("model: unable to upsert player, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`player`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `player` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(playerType, playerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(playerType, playerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for player")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == playerMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(playerType, playerMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model: unable to retrieve unique values for player")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}
	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for player")
	}

CacheNoHooks:
	if !cached {
		playerUpsertCacheMut.Lock()
		playerUpsertCache[key] = cache
		playerUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Player record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Player) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("model: no Player provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), playerPrimaryKeyMapping)
	sql := "DELETE FROM `player` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete from player")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q playerQuery) DeleteAll(exec boil.Executor) error {
	if q.Query == nil {
		return errors.New("model: no playerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from player")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PlayerSlice) DeleteAll(exec boil.Executor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `player` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, playerPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from player slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Player) Reload(exec boil.Executor) error {
	ret, err := FindPlayer(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PlayerSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PlayerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `player`.* FROM `player` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, playerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in PlayerSlice")
	}

	*o = slice

	return nil
}

// PlayerExists checks if the Player row exists.
func PlayerExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `player` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if player exists")
	}

	return exists, nil
}

// Exists checks if the Player row exists.
func (o *Player) Exists(exec boil.Executor) (bool, error) {
	return PlayerExists(exec, o.ID)
}
