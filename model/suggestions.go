// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Suggestion is an object representing the database table.
type Suggestion struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	PlayerID  null.Int  `boil:"player_id" json:"player_id,omitempty" toml:"player_id" yaml:"player_id,omitempty"`
	Feedback  string    `boil:"feedback" json:"feedback" toml:"feedback" yaml:"feedback"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *suggestionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L suggestionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SuggestionColumns = struct {
	ID        string
	PlayerID  string
	Feedback  string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	PlayerID:  "player_id",
	Feedback:  "feedback",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var SuggestionTableColumns = struct {
	ID        string
	PlayerID  string
	Feedback  string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "suggestions.id",
	PlayerID:  "suggestions.player_id",
	Feedback:  "suggestions.feedback",
	CreatedAt: "suggestions.created_at",
	UpdatedAt: "suggestions.updated_at",
}

// Generated where

var SuggestionWhere = struct {
	ID        whereHelperint
	PlayerID  whereHelpernull_Int
	Feedback  whereHelperstring
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	ID:        whereHelperint{field: "`suggestions`.`id`"},
	PlayerID:  whereHelpernull_Int{field: "`suggestions`.`player_id`"},
	Feedback:  whereHelperstring{field: "`suggestions`.`feedback`"},
	CreatedAt: whereHelpertime_Time{field: "`suggestions`.`created_at`"},
	UpdatedAt: whereHelpertime_Time{field: "`suggestions`.`updated_at`"},
}

// SuggestionRels is where relationship names are stored.
var SuggestionRels = struct {
	Player string
}{
	Player: "Player",
}

// suggestionR is where relationships are stored.
type suggestionR struct {
	Player *Player `boil:"Player" json:"Player" toml:"Player" yaml:"Player"`
}

// NewStruct creates a new relationship struct
func (*suggestionR) NewStruct() *suggestionR {
	return &suggestionR{}
}

func (r *suggestionR) GetPlayer() *Player {
	if r == nil {
		return nil
	}
	return r.Player
}

// suggestionL is where Load methods for each relationship are stored.
type suggestionL struct{}

var (
	suggestionAllColumns            = []string{"id", "player_id", "feedback", "created_at", "updated_at"}
	suggestionColumnsWithoutDefault = []string{"player_id", "feedback"}
	suggestionColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	suggestionPrimaryKeyColumns     = []string{"id"}
	suggestionGeneratedColumns      = []string{}
)

type (
	// SuggestionSlice is an alias for a slice of pointers to Suggestion.
	// This should almost always be used instead of []Suggestion.
	SuggestionSlice []*Suggestion

	suggestionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	suggestionType                 = reflect.TypeOf(&Suggestion{})
	suggestionMapping              = queries.MakeStructMapping(suggestionType)
	suggestionPrimaryKeyMapping, _ = queries.BindMapping(suggestionType, suggestionMapping, suggestionPrimaryKeyColumns)
	suggestionInsertCacheMut       sync.RWMutex
	suggestionInsertCache          = make(map[string]insertCache)
	suggestionUpdateCacheMut       sync.RWMutex
	suggestionUpdateCache          = make(map[string]updateCache)
	suggestionUpsertCacheMut       sync.RWMutex
	suggestionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single suggestion record from the query.
func (q suggestionQuery) One(exec boil.Executor) (*Suggestion, error) {
	o := &Suggestion{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for suggestions")
	}

	return o, nil
}

// All returns all Suggestion records from the query.
func (q suggestionQuery) All(exec boil.Executor) (SuggestionSlice, error) {
	var o []*Suggestion

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to Suggestion slice")
	}

	return o, nil
}

// Count returns the count of all Suggestion records in the query.
func (q suggestionQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count suggestions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q suggestionQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if suggestions exists")
	}

	return count > 0, nil
}

// Player pointed to by the foreign key.
func (o *Suggestion) Player(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.PlayerID),
	}

	queryMods = append(queryMods, mods...)

	return Players(queryMods...)
}

// LoadPlayer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (suggestionL) LoadPlayer(e boil.Executor, singular bool, maybeSuggestion interface{}, mods queries.Applicator) error {
	var slice []*Suggestion
	var object *Suggestion

	if singular {
		var ok bool
		object, ok = maybeSuggestion.(*Suggestion)
		if !ok {
			object = new(Suggestion)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSuggestion)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSuggestion))
			}
		}
	} else {
		s, ok := maybeSuggestion.(*[]*Suggestion)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSuggestion)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSuggestion))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &suggestionR{}
		}
		if !queries.IsNil(object.PlayerID) {
			args = append(args, object.PlayerID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &suggestionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.PlayerID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.PlayerID) {
				args = append(args, obj.PlayerID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`player`),
		qm.WhereIn(`player.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for player")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for player")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Player = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.Suggestions = append(foreign.R.Suggestions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PlayerID, foreign.ID) {
				local.R.Player = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.Suggestions = append(foreign.R.Suggestions, local)
				break
			}
		}
	}

	return nil
}

// SetPlayer of the suggestion to the related item.
// Sets o.R.Player to related.
// Adds o to related.R.Suggestions.
func (o *Suggestion) SetPlayer(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `suggestions` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"player_id"}),
		strmangle.WhereClause("`", "`", 0, suggestionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PlayerID, related.ID)
	if o.R == nil {
		o.R = &suggestionR{
			Player: related,
		}
	} else {
		o.R.Player = related
	}

	if related.R == nil {
		related.R = &playerR{
			Suggestions: SuggestionSlice{o},
		}
	} else {
		related.R.Suggestions = append(related.R.Suggestions, o)
	}

	return nil
}

// RemovePlayer relationship.
// Sets o.R.Player to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Suggestion) RemovePlayer(exec boil.Executor, related *Player) error {
	var err error

	queries.SetScanner(&o.PlayerID, nil)
	if err = o.Update(exec, boil.Whitelist("player_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Player = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Suggestions {
		if queries.Equal(o.PlayerID, ri.PlayerID) {
			continue
		}

		ln := len(related.R.Suggestions)
		if ln > 1 && i < ln-1 {
			related.R.Suggestions[i] = related.R.Suggestions[ln-1]
		}
		related.R.Suggestions = related.R.Suggestions[:ln-1]
		break
	}
	return nil
}

// Suggestions retrieves all the records using an executor.
func Suggestions(mods ...qm.QueryMod) suggestionQuery {
	mods = append(mods, qm.From("`suggestions`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`suggestions`.*"})
	}

	return suggestionQuery{q}
}

// FindSuggestion retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSuggestion(exec boil.Executor, iD int, selectCols ...string) (*Suggestion, error) {
	suggestionObj := &Suggestion{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `suggestions` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, suggestionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from suggestions")
	}

	return suggestionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Suggestion) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no suggestions provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(suggestionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	suggestionInsertCacheMut.RLock()
	cache, cached := suggestionInsertCache[key]
	suggestionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			suggestionAllColumns,
			suggestionColumnsWithDefault,
			suggestionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(suggestionType, suggestionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(suggestionType, suggestionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `suggestions` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `suggestions` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `suggestions` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, suggestionPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into suggestions")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == suggestionMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}
	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for suggestions")
	}

CacheNoHooks:
	if !cached {
		suggestionInsertCacheMut.Lock()
		suggestionInsertCache[key] = cache
		suggestionInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Suggestion.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Suggestion) Update(exec boil.Executor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	suggestionUpdateCacheMut.RLock()
	cache, cached := suggestionUpdateCache[key]
	suggestionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			suggestionAllColumns,
			suggestionPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return errors.New("model: unable to update suggestions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `suggestions` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, suggestionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(suggestionType, suggestionMapping, append(wl, suggestionPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update suggestions row")
	}

	if !cached {
		suggestionUpdateCacheMut.Lock()
		suggestionUpdateCache[key] = cache
		suggestionUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q suggestionQuery) UpdateAll(exec boil.Executor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "model: unable to update all for suggestions")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SuggestionSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), suggestionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `suggestions` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, suggestionPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update all in suggestion slice")
	}

	return nil
}

var mySQLSuggestionUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Suggestion) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no suggestions provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(suggestionColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSuggestionUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	suggestionUpsertCacheMut.RLock()
	cache, cached := suggestionUpsertCache[key]
	suggestionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			suggestionAllColumns,
			suggestionColumnsWithDefault,
			suggestionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			suggestionAllColumns,
			suggestionPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("model: unable to upsert suggestions, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`suggestions`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `suggestions` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(suggestionType, suggestionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(suggestionType, suggestionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for suggestions")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == suggestionMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(suggestionType, suggestionMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model: unable to retrieve unique values for suggestions")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}
	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for suggestions")
	}

CacheNoHooks:
	if !cached {
		suggestionUpsertCacheMut.Lock()
		suggestionUpsertCache[key] = cache
		suggestionUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Suggestion record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Suggestion) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("model: no Suggestion provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), suggestionPrimaryKeyMapping)
	sql := "DELETE FROM `suggestions` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete from suggestions")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q suggestionQuery) DeleteAll(exec boil.Executor) error {
	if q.Query == nil {
		return errors.New("model: no suggestionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from suggestions")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SuggestionSlice) DeleteAll(exec boil.Executor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), suggestionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `suggestions` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, suggestionPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from suggestion slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Suggestion) Reload(exec boil.Executor) error {
	ret, err := FindSuggestion(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SuggestionSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SuggestionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), suggestionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `suggestions`.* FROM `suggestions` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, suggestionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in SuggestionSlice")
	}

	*o = slice

	return nil
}

// SuggestionExists checks if the Suggestion row exists.
func SuggestionExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `suggestions` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if suggestions exists")
	}

	return exists, nil
}

// Exists checks if the Suggestion row exists.
func (o *Suggestion) Exists(exec boil.Executor) (bool, error) {
	return SuggestionExists(exec, o.ID)
}
